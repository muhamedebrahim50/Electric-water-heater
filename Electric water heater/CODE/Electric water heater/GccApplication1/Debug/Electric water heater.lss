
Electric water heater.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000f62  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001e  00800060  00000f62  00000ff6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001f  0080007e  0080007e  00001014  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001014  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001044  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000260  00000000  00000000  00001080  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002e63  00000000  00000000  000012e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001142  00000000  00000000  00004143  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001553  00000000  00000000  00005285  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000568  00000000  00000000  000067d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008f3  00000000  00000000  00006d40  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000116f  00000000  00000000  00007633  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c0  00000000  00000000  000087a2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 9a 00 	jmp	0x134	; 0x134 <__vector_1>
   8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__vector_2>
   c:	0c 94 0c 01 	jmp	0x218	; 0x218 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 88 04 	jmp	0x910	; 0x910 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e6       	ldi	r30, 0x62	; 98
  68:	ff e0       	ldi	r31, 0x0F	; 15
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 37       	cpi	r26, 0x7E	; 126
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ae e7       	ldi	r26, 0x7E	; 126
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ad 39       	cpi	r26, 0x9D	; 157
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 af 07 	jmp	0xf5e	; 0xf5e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
u8 setFlag = 0;
u8 eepromTemp;
float temp=0.0;
int main(void)
{
	system_init();
  92:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <system_init>
	Timer0_RunFun(temperatureSettingEnd,5000,FALSE); //Exit setting mode after 5 sec with no button pressed
  96:	20 e0       	ldi	r18, 0x00	; 0
  98:	48 e8       	ldi	r20, 0x88	; 136
  9a:	53 e1       	ldi	r21, 0x13	; 19
  9c:	60 e0       	ldi	r22, 0x00	; 0
  9e:	70 e0       	ldi	r23, 0x00	; 0
  a0:	87 ec       	ldi	r24, 0xC7	; 199
  a2:	95 e0       	ldi	r25, 0x05	; 5
  a4:	0e 94 4f 04 	call	0x89e	; 0x89e <Timer0_RunFun>

	while (1)
	{
		if(state==OFF)
  a8:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <state>
  ac:	81 11       	cpse	r24, r1
  ae:	03 c0       	rjmp	.+6      	; 0xb6 <main+0x24>
		{
			disable();
  b0:	0e 94 b7 05 	call	0xb6e	; 0xb6e <disable>
  b4:	f9 cf       	rjmp	.-14     	; 0xa8 <main+0x16>
		}
		else if(state==ON)
  b6:	81 30       	cpi	r24, 0x01	; 1
  b8:	89 f4       	brne	.+34     	; 0xdc <main+0x4a>
		{
			temp=temperatureRead();
  ba:	0e 94 aa 01 	call	0x354	; 0x354 <temperatureRead>
  be:	60 93 7e 00 	sts	0x007E, r22	; 0x80007e <__data_end>
  c2:	70 93 7f 00 	sts	0x007F, r23	; 0x80007f <__data_end+0x1>
  c6:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__data_end+0x2>
  ca:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__data_end+0x3>
			Seg_DisplayInt((u32)temp);
  ce:	0e 94 49 06 	call	0xc92	; 0xc92 <__fixunssfsi>
  d2:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <Seg_DisplayInt>
			temperatureControl();
  d6:	0e 94 2e 05 	call	0xa5c	; 0xa5c <temperatureControl>
  da:	e6 cf       	rjmp	.-52     	; 0xa8 <main+0x16>
		}
		else if(state==SET)
  dc:	82 30       	cpi	r24, 0x02	; 2
  de:	21 f7       	brne	.-56     	; 0xa8 <main+0x16>
		{
			Seg_init();
  e0:	0e 94 c0 01 	call	0x380	; 0x380 <Seg_init>
			while(counter<300)
  e4:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <counter>
  e8:	90 91 84 00 	lds	r25, 0x0084	; 0x800084 <counter+0x1>
  ec:	8c 32       	cpi	r24, 0x2C	; 44
  ee:	91 40       	sbci	r25, 0x01	; 1
  f0:	98 f4       	brcc	.+38     	; 0x118 <main+0x86>
			{
				Seg_DisplayInt((u32)set_temp);
  f2:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__data_start>
  f6:	70 e0       	ldi	r23, 0x00	; 0
  f8:	80 e0       	ldi	r24, 0x00	; 0
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <Seg_DisplayInt>
				counter++;
 100:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <counter>
 104:	90 91 84 00 	lds	r25, 0x0084	; 0x800084 <counter+0x1>
 108:	01 96       	adiw	r24, 0x01	; 1
 10a:	90 93 84 00 	sts	0x0084, r25	; 0x800084 <counter+0x1>
 10e:	80 93 83 00 	sts	0x0083, r24	; 0x800083 <counter>
			temperatureControl();
		}
		else if(state==SET)
		{
			Seg_init();
			while(counter<300)
 112:	8c 32       	cpi	r24, 0x2C	; 44
 114:	91 40       	sbci	r25, 0x01	; 1
 116:	68 f3       	brcs	.-38     	; 0xf2 <main+0x60>
			{
				Seg_DisplayInt((u32)set_temp);
				counter++;
			}
			counter=0;
 118:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <counter+0x1>
 11c:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <counter>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 120:	8f ef       	ldi	r24, 0xFF	; 255
 122:	91 ee       	ldi	r25, 0xE1	; 225
 124:	24 e0       	ldi	r18, 0x04	; 4
 126:	81 50       	subi	r24, 0x01	; 1
 128:	90 40       	sbci	r25, 0x00	; 0
 12a:	20 40       	sbci	r18, 0x00	; 0
 12c:	e1 f7       	brne	.-8      	; 0x126 <main+0x94>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <main+0x9e>
 130:	00 00       	nop
 132:	ba cf       	rjmp	.-140    	; 0xa8 <main+0x16>

00000134 <__vector_1>:
		}
	}
}

ISR(INT0_vect)	// Up button
{
 134:	1f 92       	push	r1
 136:	0f 92       	push	r0
 138:	0f b6       	in	r0, 0x3f	; 63
 13a:	0f 92       	push	r0
 13c:	11 24       	eor	r1, r1
 13e:	2f 93       	push	r18
 140:	3f 93       	push	r19
 142:	4f 93       	push	r20
 144:	5f 93       	push	r21
 146:	6f 93       	push	r22
 148:	7f 93       	push	r23
 14a:	8f 93       	push	r24
 14c:	9f 93       	push	r25
 14e:	af 93       	push	r26
 150:	bf 93       	push	r27
 152:	ef 93       	push	r30
 154:	ff 93       	push	r31
	state=SET;
 156:	82 e0       	ldi	r24, 0x02	; 2
 158:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <state>
	ResetTimer();
 15c:	0e 94 45 04 	call	0x88a	; 0x88a <ResetTimer>
	if((state==SET) && (set_temp<75) && (setFlag == 1) )
 160:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <state>
 164:	82 30       	cpi	r24, 0x02	; 2
 166:	59 f4       	brne	.+22     	; 0x17e <__vector_1+0x4a>
 168:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 16c:	8b 34       	cpi	r24, 0x4B	; 75
 16e:	38 f4       	brcc	.+14     	; 0x17e <__vector_1+0x4a>
 170:	90 91 82 00 	lds	r25, 0x0082	; 0x800082 <setFlag>
 174:	91 30       	cpi	r25, 0x01	; 1
 176:	19 f4       	brne	.+6      	; 0x17e <__vector_1+0x4a>
	{	
		set_temp+=5;
 178:	8b 5f       	subi	r24, 0xFB	; 251
 17a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
	}
	setFlag = 1;
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <setFlag>
}
 184:	ff 91       	pop	r31
 186:	ef 91       	pop	r30
 188:	bf 91       	pop	r27
 18a:	af 91       	pop	r26
 18c:	9f 91       	pop	r25
 18e:	8f 91       	pop	r24
 190:	7f 91       	pop	r23
 192:	6f 91       	pop	r22
 194:	5f 91       	pop	r21
 196:	4f 91       	pop	r20
 198:	3f 91       	pop	r19
 19a:	2f 91       	pop	r18
 19c:	0f 90       	pop	r0
 19e:	0f be       	out	0x3f, r0	; 63
 1a0:	0f 90       	pop	r0
 1a2:	1f 90       	pop	r1
 1a4:	18 95       	reti

000001a6 <__vector_2>:
ISR(INT1_vect)	// Down button
{
 1a6:	1f 92       	push	r1
 1a8:	0f 92       	push	r0
 1aa:	0f b6       	in	r0, 0x3f	; 63
 1ac:	0f 92       	push	r0
 1ae:	11 24       	eor	r1, r1
 1b0:	2f 93       	push	r18
 1b2:	3f 93       	push	r19
 1b4:	4f 93       	push	r20
 1b6:	5f 93       	push	r21
 1b8:	6f 93       	push	r22
 1ba:	7f 93       	push	r23
 1bc:	8f 93       	push	r24
 1be:	9f 93       	push	r25
 1c0:	af 93       	push	r26
 1c2:	bf 93       	push	r27
 1c4:	ef 93       	push	r30
 1c6:	ff 93       	push	r31
	state=SET;
 1c8:	82 e0       	ldi	r24, 0x02	; 2
 1ca:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <state>
	ResetTimer();
 1ce:	0e 94 45 04 	call	0x88a	; 0x88a <ResetTimer>
	if((state==SET) && (set_temp>35) && (setFlag == 1))
 1d2:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <state>
 1d6:	82 30       	cpi	r24, 0x02	; 2
 1d8:	59 f4       	brne	.+22     	; 0x1f0 <__vector_2+0x4a>
 1da:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 1de:	84 32       	cpi	r24, 0x24	; 36
 1e0:	38 f0       	brcs	.+14     	; 0x1f0 <__vector_2+0x4a>
 1e2:	90 91 82 00 	lds	r25, 0x0082	; 0x800082 <setFlag>
 1e6:	91 30       	cpi	r25, 0x01	; 1
 1e8:	19 f4       	brne	.+6      	; 0x1f0 <__vector_2+0x4a>
	{
		set_temp-=5;
 1ea:	85 50       	subi	r24, 0x05	; 5
 1ec:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
	}
	setFlag = 1;
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <setFlag>
}
 1f6:	ff 91       	pop	r31
 1f8:	ef 91       	pop	r30
 1fa:	bf 91       	pop	r27
 1fc:	af 91       	pop	r26
 1fe:	9f 91       	pop	r25
 200:	8f 91       	pop	r24
 202:	7f 91       	pop	r23
 204:	6f 91       	pop	r22
 206:	5f 91       	pop	r21
 208:	4f 91       	pop	r20
 20a:	3f 91       	pop	r19
 20c:	2f 91       	pop	r18
 20e:	0f 90       	pop	r0
 210:	0f be       	out	0x3f, r0	; 63
 212:	0f 90       	pop	r0
 214:	1f 90       	pop	r1
 216:	18 95       	reti

00000218 <__vector_3>:
ISR(INT2_vect) // ON/OFF Button
{
 218:	1f 92       	push	r1
 21a:	0f 92       	push	r0
 21c:	0f b6       	in	r0, 0x3f	; 63
 21e:	0f 92       	push	r0
 220:	11 24       	eor	r1, r1
 222:	8f 93       	push	r24
	if(state==OFF)
 224:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <state>
 228:	81 11       	cpse	r24, r1
 22a:	06 c0       	rjmp	.+12     	; 0x238 <__vector_3+0x20>
	{
		state=ON;
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <state>
		setFlag=0;
 232:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <setFlag>
 236:	05 c0       	rjmp	.+10     	; 0x242 <__vector_3+0x2a>
	}
	else if((state==ON)||(state==SET))
 238:	81 50       	subi	r24, 0x01	; 1
 23a:	82 30       	cpi	r24, 0x02	; 2
 23c:	10 f4       	brcc	.+4      	; 0x242 <__vector_3+0x2a>
	{
		state=OFF;
 23e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <state>
	}
}
 242:	8f 91       	pop	r24
 244:	0f 90       	pop	r0
 246:	0f be       	out	0x3f, r0	; 63
 248:	0f 90       	pop	r0
 24a:	1f 90       	pop	r1
 24c:	18 95       	reti

0000024e <readEEPROM>:
	 writePin(PB4,HIGH);
	 _delay_ms(10);
	 WRITE_DI();
 }
 u8 readEEPROM(u16 location)
 {
 24e:	cf 93       	push	r28
 250:	df 93       	push	r29
 252:	ec 01       	movw	r28, r24
	 u8 data;
	 writePin(PB4,LOW);
 254:	60 e0       	ldi	r22, 0x00	; 0
 256:	8c e0       	ldi	r24, 0x0C	; 12
 258:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <writePin>
 25c:	8f ec       	ldi	r24, 0xCF	; 207
 25e:	97 e0       	ldi	r25, 0x07	; 7
 260:	01 97       	sbiw	r24, 0x01	; 1
 262:	f1 f7       	brne	.-4      	; 0x260 <readEEPROM+0x12>
 264:	00 c0       	rjmp	.+0      	; 0x266 <readEEPROM+0x18>
 266:	00 00       	nop
	 _delay_ms(1);
	 SPI_Transceive(((location>>5)& ~(0x7))|EROM_COM_READ);
 268:	9e 01       	movw	r18, r28
 26a:	36 95       	lsr	r19
 26c:	27 95       	ror	r18
 26e:	32 95       	swap	r19
 270:	22 95       	swap	r18
 272:	2f 70       	andi	r18, 0x0F	; 15
 274:	23 27       	eor	r18, r19
 276:	3f 70       	andi	r19, 0x0F	; 15
 278:	23 27       	eor	r18, r19
 27a:	82 2f       	mov	r24, r18
 27c:	88 7f       	andi	r24, 0xF8	; 248
 27e:	83 60       	ori	r24, 0x03	; 3
 280:	0e 94 fe 03 	call	0x7fc	; 0x7fc <SPI_Transceive>
	 SPI_Transceive((u8)location);
 284:	8c 2f       	mov	r24, r28
 286:	0e 94 fe 03 	call	0x7fc	; 0x7fc <SPI_Transceive>
	 data= SPI_Transceive(0xff);	//send garbage to recieve right data
 28a:	8f ef       	ldi	r24, 0xFF	; 255
 28c:	0e 94 fe 03 	call	0x7fc	; 0x7fc <SPI_Transceive>
 290:	c8 2f       	mov	r28, r24
 292:	8f e1       	ldi	r24, 0x1F	; 31
 294:	9e e4       	ldi	r25, 0x4E	; 78
 296:	01 97       	sbiw	r24, 0x01	; 1
 298:	f1 f7       	brne	.-4      	; 0x296 <readEEPROM+0x48>
 29a:	00 c0       	rjmp	.+0      	; 0x29c <readEEPROM+0x4e>
 29c:	00 00       	nop
	 _delay_ms(10);
	  writePin(PB4,HIGH);
 29e:	61 e0       	ldi	r22, 0x01	; 1
 2a0:	8c e0       	ldi	r24, 0x0C	; 12
 2a2:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <writePin>
	 return data;
 }
 2a6:	8c 2f       	mov	r24, r28
 2a8:	df 91       	pop	r29
 2aa:	cf 91       	pop	r28
 2ac:	08 95       	ret

000002ae <WRITE_EN>:
 
 
 void WRITE_EN(void)
 {
	 writePin(PB4,LOW);
 2ae:	60 e0       	ldi	r22, 0x00	; 0
 2b0:	8c e0       	ldi	r24, 0x0C	; 12
 2b2:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <writePin>
	 SPI_Transceive(0x06);
 2b6:	86 e0       	ldi	r24, 0x06	; 6
 2b8:	0e 94 fe 03 	call	0x7fc	; 0x7fc <SPI_Transceive>
	 writePin(PB4,HIGH);
 2bc:	61 e0       	ldi	r22, 0x01	; 1
 2be:	8c e0       	ldi	r24, 0x0C	; 12
 2c0:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <writePin>
 2c4:	8f e9       	ldi	r24, 0x9F	; 159
 2c6:	9f e0       	ldi	r25, 0x0F	; 15
 2c8:	01 97       	sbiw	r24, 0x01	; 1
 2ca:	f1 f7       	brne	.-4      	; 0x2c8 <WRITE_EN+0x1a>
 2cc:	00 c0       	rjmp	.+0      	; 0x2ce <WRITE_EN+0x20>
 2ce:	00 00       	nop
 2d0:	08 95       	ret

000002d2 <WRITE_DI>:
 }
 
 
  void WRITE_DI(void)
  {
	  writePin(PB4,LOW);
 2d2:	60 e0       	ldi	r22, 0x00	; 0
 2d4:	8c e0       	ldi	r24, 0x0C	; 12
 2d6:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <writePin>
	  SPI_Transceive(0x04);
 2da:	84 e0       	ldi	r24, 0x04	; 4
 2dc:	0e 94 fe 03 	call	0x7fc	; 0x7fc <SPI_Transceive>
	  writePin(PB4,HIGH);
 2e0:	61 e0       	ldi	r22, 0x01	; 1
 2e2:	8c e0       	ldi	r24, 0x0C	; 12
 2e4:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <writePin>
 2e8:	8f e9       	ldi	r24, 0x9F	; 159
 2ea:	9f e0       	ldi	r25, 0x0F	; 15
 2ec:	01 97       	sbiw	r24, 0x01	; 1
 2ee:	f1 f7       	brne	.-4      	; 0x2ec <WRITE_DI+0x1a>
 2f0:	00 c0       	rjmp	.+0      	; 0x2f2 <WRITE_DI+0x20>
 2f2:	00 00       	nop
 2f4:	08 95       	ret

000002f6 <writeEEPROM>:
 */ 
#include "ExtEEPROM.h"

 u16 autoAddress = 0x00;
 void writeEEPROM(u16 location,u8 data)
 {
 2f6:	1f 93       	push	r17
 2f8:	cf 93       	push	r28
 2fa:	df 93       	push	r29
 2fc:	ec 01       	movw	r28, r24
 2fe:	16 2f       	mov	r17, r22
	 WRITE_EN();    
 300:	0e 94 57 01 	call	0x2ae	; 0x2ae <WRITE_EN>
	 writePin(PB4,LOW);
 304:	60 e0       	ldi	r22, 0x00	; 0
 306:	8c e0       	ldi	r24, 0x0C	; 12
 308:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <writePin>
	 SPI_Transceive(((location>>5)& ~(0x7))|EROM_COM_WRITE);
 30c:	9e 01       	movw	r18, r28
 30e:	36 95       	lsr	r19
 310:	27 95       	ror	r18
 312:	32 95       	swap	r19
 314:	22 95       	swap	r18
 316:	2f 70       	andi	r18, 0x0F	; 15
 318:	23 27       	eor	r18, r19
 31a:	3f 70       	andi	r19, 0x0F	; 15
 31c:	23 27       	eor	r18, r19
 31e:	82 2f       	mov	r24, r18
 320:	88 7f       	andi	r24, 0xF8	; 248
 322:	82 60       	ori	r24, 0x02	; 2
 324:	0e 94 fe 03 	call	0x7fc	; 0x7fc <SPI_Transceive>
	 SPI_Transceive((u8) location);
 328:	8c 2f       	mov	r24, r28
 32a:	0e 94 fe 03 	call	0x7fc	; 0x7fc <SPI_Transceive>
	 SPI_Transceive(data);
 32e:	81 2f       	mov	r24, r17
 330:	0e 94 fe 03 	call	0x7fc	; 0x7fc <SPI_Transceive>
	 writePin(PB4,HIGH);
 334:	61 e0       	ldi	r22, 0x01	; 1
 336:	8c e0       	ldi	r24, 0x0C	; 12
 338:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <writePin>
 33c:	8f e1       	ldi	r24, 0x1F	; 31
 33e:	9e e4       	ldi	r25, 0x4E	; 78
 340:	01 97       	sbiw	r24, 0x01	; 1
 342:	f1 f7       	brne	.-4      	; 0x340 <writeEEPROM+0x4a>
 344:	00 c0       	rjmp	.+0      	; 0x346 <writeEEPROM+0x50>
 346:	00 00       	nop
	 _delay_ms(10);
	 WRITE_DI();
 348:	0e 94 69 01 	call	0x2d2	; 0x2d2 <WRITE_DI>
 }
 34c:	df 91       	pop	r29
 34e:	cf 91       	pop	r28
 350:	1f 91       	pop	r17
 352:	08 95       	ret

00000354 <temperatureRead>:
#include "LM35.h"

float temperatureRead (void)
{
	float temperature;
	temperature= read_analog(LM35_PIN)*4.88;
 354:	87 e0       	ldi	r24, 0x07	; 7
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	0e 94 6e 02 	call	0x4dc	; 0x4dc <read_analog>
 35c:	bc 01       	movw	r22, r24
 35e:	80 e0       	ldi	r24, 0x00	; 0
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	0e 94 78 06 	call	0xcf0	; 0xcf0 <__floatunsisf>
 366:	26 ef       	ldi	r18, 0xF6	; 246
 368:	38 e2       	ldi	r19, 0x28	; 40
 36a:	4c e9       	ldi	r20, 0x9C	; 156
 36c:	50 e4       	ldi	r21, 0x40	; 64
 36e:	0e 94 06 07 	call	0xe0c	; 0xe0c <__mulsf3>
	temperature= temperature/10;
 372:	20 e0       	ldi	r18, 0x00	; 0
 374:	30 e0       	ldi	r19, 0x00	; 0
 376:	40 e2       	ldi	r20, 0x20	; 32
 378:	51 e4       	ldi	r21, 0x41	; 65
 37a:	0e 94 d7 05 	call	0xbae	; 0xbae <__divsf3>
	return temperature ;
 37e:	08 95       	ret

00000380 <Seg_init>:
};

/* digit -> 1:2, value -> 0:9, '.' */
void Seg_init(void){
	/* Out */
	writePins(&SEG_DATA_DDR,SEG_DATA_MSK,OUTPUT);
 380:	41 e0       	ldi	r20, 0x01	; 1
 382:	6f e7       	ldi	r22, 0x7F	; 127
 384:	84 e3       	ldi	r24, 0x34	; 52
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	0e 94 94 03 	call	0x728	; 0x728 <writePins>
	writePins(&SEG_DIGIT_DDR,SEG_DIGIT_MSK,OUTPUT);
 38c:	41 e0       	ldi	r20, 0x01	; 1
 38e:	63 e0       	ldi	r22, 0x03	; 3
 390:	81 e3       	ldi	r24, 0x31	; 49
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	0e 94 94 03 	call	0x728	; 0x728 <writePins>
	/* defaults */
	writePins(&SEG_DIGIT_PORT,SEG_DIGIT_MSK,LOW);
 398:	40 e0       	ldi	r20, 0x00	; 0
 39a:	63 e0       	ldi	r22, 0x03	; 3
 39c:	82 e3       	ldi	r24, 0x32	; 50
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	0e 94 94 03 	call	0x728	; 0x728 <writePins>
	writePins(&SEG_DATA_PORT,SEG_DATA_MSK,HIGH);
 3a4:	41 e0       	ldi	r20, 0x01	; 1
 3a6:	6f e7       	ldi	r22, 0x7F	; 127
 3a8:	85 e3       	ldi	r24, 0x35	; 53
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	0e 94 94 03 	call	0x728	; 0x728 <writePins>
 3b0:	08 95       	ret

000003b2 <Seg_Display>:
}
void Seg_Display(u8 digit, u8 value){ 
	SETBit(SEG_DIGIT_PORT, (digit-1));
 3b2:	22 b3       	in	r18, 0x12	; 18
 3b4:	3f ef       	ldi	r19, 0xFF	; 255
 3b6:	38 0f       	add	r19, r24
 3b8:	81 e0       	ldi	r24, 0x01	; 1
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	02 c0       	rjmp	.+4      	; 0x3c2 <Seg_Display+0x10>
 3be:	88 0f       	add	r24, r24
 3c0:	99 1f       	adc	r25, r25
 3c2:	3a 95       	dec	r19
 3c4:	e2 f7       	brpl	.-8      	; 0x3be <Seg_Display+0xc>
 3c6:	28 2b       	or	r18, r24
 3c8:	22 bb       	out	0x12, r18	; 18
	if(value == '.'){
 3ca:	6e 32       	cpi	r22, 0x2E	; 46
 3cc:	19 f4       	brne	.+6      	; 0x3d4 <Seg_Display+0x22>
		SEG_DATA_PORT = numbers[10];
 3ce:	2f e7       	ldi	r18, 0x7F	; 127
 3d0:	25 bb       	out	0x15, r18	; 21
 3d2:	06 c0       	rjmp	.+12     	; 0x3e0 <Seg_Display+0x2e>
	}
	else{
		SEG_DATA_PORT = numbers[value];
 3d4:	e6 2f       	mov	r30, r22
 3d6:	f0 e0       	ldi	r31, 0x00	; 0
 3d8:	e0 59       	subi	r30, 0x90	; 144
 3da:	ff 4f       	sbci	r31, 0xFF	; 255
 3dc:	20 81       	ld	r18, Z
 3de:	25 bb       	out	0x15, r18	; 21
 3e0:	ef ec       	ldi	r30, 0xCF	; 207
 3e2:	f7 e0       	ldi	r31, 0x07	; 7
 3e4:	31 97       	sbiw	r30, 0x01	; 1
 3e6:	f1 f7       	brne	.-4      	; 0x3e4 <Seg_Display+0x32>
 3e8:	00 c0       	rjmp	.+0      	; 0x3ea <Seg_Display+0x38>
 3ea:	00 00       	nop
	}

	_delay_ms(1);
	CLRBit(SEG_DIGIT_PORT, (digit-1));
 3ec:	92 b3       	in	r25, 0x12	; 18
 3ee:	80 95       	com	r24
 3f0:	89 23       	and	r24, r25
 3f2:	82 bb       	out	0x12, r24	; 18
 3f4:	08 95       	ret

000003f6 <Seg_DisplayInt>:
}
void Seg_DisplayInt(u32 intValue){
 3f6:	8f 92       	push	r8
 3f8:	9f 92       	push	r9
 3fa:	af 92       	push	r10
 3fc:	bf 92       	push	r11
 3fe:	ef 92       	push	r14
 400:	ff 92       	push	r15
 402:	0f 93       	push	r16
 404:	1f 93       	push	r17
 406:	cf 93       	push	r28
 408:	df 93       	push	r29
 40a:	cd b7       	in	r28, 0x3d	; 61
 40c:	de b7       	in	r29, 0x3e	; 62
 40e:	2a 97       	sbiw	r28, 0x0a	; 10
 410:	0f b6       	in	r0, 0x3f	; 63
 412:	f8 94       	cli
 414:	de bf       	out	0x3e, r29	; 62
 416:	0f be       	out	0x3f, r0	; 63
 418:	cd bf       	out	0x3d, r28	; 61
	int i = 0, j = 0 , arr[5] = {-1,-1,-1,-1,-1}, remainder;
 41a:	2a e0       	ldi	r18, 0x0A	; 10
 41c:	e6 e6       	ldi	r30, 0x66	; 102
 41e:	f0 e0       	ldi	r31, 0x00	; 0
 420:	de 01       	movw	r26, r28
 422:	11 96       	adiw	r26, 0x01	; 1
 424:	01 90       	ld	r0, Z+
 426:	0d 92       	st	X+, r0
 428:	2a 95       	dec	r18
 42a:	e1 f7       	brne	.-8      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
	if((intValue>=0) && (intValue<100))
 42c:	64 36       	cpi	r22, 0x64	; 100
 42e:	71 05       	cpc	r23, r1
 430:	81 05       	cpc	r24, r1
 432:	91 05       	cpc	r25, r1
 434:	e8 f5       	brcc	.+122    	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
	{
		while (intValue != 0)
 436:	61 15       	cp	r22, r1
 438:	71 05       	cpc	r23, r1
 43a:	81 05       	cpc	r24, r1
 43c:	91 05       	cpc	r25, r1
 43e:	09 f1       	breq	.+66     	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
 440:	9e 01       	movw	r18, r28
 442:	2f 5f       	subi	r18, 0xFF	; 255
 444:	3f 4f       	sbci	r19, 0xFF	; 255
 446:	79 01       	movw	r14, r18
 448:	00 e0       	ldi	r16, 0x00	; 0
 44a:	10 e0       	ldi	r17, 0x00	; 0
		{
			remainder = intValue % 10;
 44c:	0f 2e       	mov	r0, r31
 44e:	fa e0       	ldi	r31, 0x0A	; 10
 450:	8f 2e       	mov	r8, r31
 452:	91 2c       	mov	r9, r1
 454:	a1 2c       	mov	r10, r1
 456:	b1 2c       	mov	r11, r1
 458:	f0 2d       	mov	r31, r0
 45a:	a5 01       	movw	r20, r10
 45c:	94 01       	movw	r18, r8
 45e:	0e 94 73 07 	call	0xee6	; 0xee6 <__udivmodsi4>
 462:	f7 01       	movw	r30, r14
 464:	61 93       	st	Z+, r22
 466:	71 93       	st	Z+, r23
 468:	7f 01       	movw	r14, r30
			arr[i] = remainder;
			intValue /= 10;
 46a:	62 2f       	mov	r22, r18
 46c:	73 2f       	mov	r23, r19
 46e:	84 2f       	mov	r24, r20
 470:	95 2f       	mov	r25, r21
			i++;
 472:	0f 5f       	subi	r16, 0xFF	; 255
 474:	1f 4f       	sbci	r17, 0xFF	; 255
}
void Seg_DisplayInt(u32 intValue){
	int i = 0, j = 0 , arr[5] = {-1,-1,-1,-1,-1}, remainder;
	if((intValue>=0) && (intValue<100))
	{
		while (intValue != 0)
 476:	61 15       	cp	r22, r1
 478:	71 05       	cpc	r23, r1
 47a:	81 05       	cpc	r24, r1
 47c:	91 05       	cpc	r25, r1
 47e:	69 f7       	brne	.-38     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
 480:	02 c0       	rjmp	.+4      	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
 482:	00 e0       	ldi	r16, 0x00	; 0
 484:	10 e0       	ldi	r17, 0x00	; 0
			remainder = intValue % 10;
			arr[i] = remainder;
			intValue /= 10;
			i++;
		}
		i-=1;
 486:	01 50       	subi	r16, 0x01	; 1
 488:	11 09       	sbc	r17, r1
		while (arr[j]>=0)
 48a:	69 81       	ldd	r22, Y+1	; 0x01
 48c:	7a 81       	ldd	r23, Y+2	; 0x02
 48e:	77 23       	and	r23, r23
 490:	7c f0       	brlt	.+30     	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
 492:	0f 5f       	subi	r16, 0xFF	; 255
 494:	7e 01       	movw	r14, r28
 496:	f3 e0       	ldi	r31, 0x03	; 3
 498:	ef 0e       	add	r14, r31
 49a:	f1 1c       	adc	r15, r1
		{
			Seg_Display(i+1,arr[j]);
 49c:	80 2f       	mov	r24, r16
 49e:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <Seg_Display>
			arr[i] = remainder;
			intValue /= 10;
			i++;
		}
		i-=1;
		while (arr[j]>=0)
 4a2:	f7 01       	movw	r30, r14
 4a4:	61 91       	ld	r22, Z+
 4a6:	71 91       	ld	r23, Z+
 4a8:	7f 01       	movw	r14, r30
 4aa:	01 50       	subi	r16, 0x01	; 1
 4ac:	77 23       	and	r23, r23
 4ae:	b4 f7       	brge	.-20     	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
						i--;  
			j++;  
		}		
	}

 4b0:	2a 96       	adiw	r28, 0x0a	; 10
 4b2:	0f b6       	in	r0, 0x3f	; 63
 4b4:	f8 94       	cli
 4b6:	de bf       	out	0x3e, r29	; 62
 4b8:	0f be       	out	0x3f, r0	; 63
 4ba:	cd bf       	out	0x3d, r28	; 61
 4bc:	df 91       	pop	r29
 4be:	cf 91       	pop	r28
 4c0:	1f 91       	pop	r17
 4c2:	0f 91       	pop	r16
 4c4:	ff 90       	pop	r15
 4c6:	ef 90       	pop	r14
 4c8:	bf 90       	pop	r11
 4ca:	af 90       	pop	r10
 4cc:	9f 90       	pop	r9
 4ce:	8f 90       	pop	r8
 4d0:	08 95       	ret

000004d2 <ADC_init>:



void ADC_init(void)
{
	ADMUX|=(AVCC<<6)|(ADLAR<<5);	
 4d2:	3e 9a       	sbi	0x07, 6	; 7
	ADCSRA|=(SELEPRESC)|(ADATE<<5)|(ADIE<<3)|(ADEN<<7);
 4d4:	86 b1       	in	r24, 0x06	; 6
 4d6:	87 68       	ori	r24, 0x87	; 135
 4d8:	86 b9       	out	0x06, r24	; 6
 4da:	08 95       	ret

000004dc <read_analog>:
}
u16 read_analog(u16 ADC_NUM)
{ 
	ADMUX&=~(0x1F);
 4dc:	97 b1       	in	r25, 0x07	; 7
 4de:	90 7e       	andi	r25, 0xE0	; 224
 4e0:	97 b9       	out	0x07, r25	; 7
	ADMUX|=(ADC_NUM);
 4e2:	97 b1       	in	r25, 0x07	; 7
 4e4:	89 2b       	or	r24, r25
 4e6:	87 b9       	out	0x07, r24	; 7
	ADCSRA|=(1<<6);			 //start conversion
 4e8:	36 9a       	sbi	0x06, 6	; 6
	while((ADCSRA>>6)&0x01); //wait until conversion complete
 4ea:	36 99       	sbic	0x06, 6	; 6
 4ec:	fe cf       	rjmp	.-4      	; 0x4ea <read_analog+0xe>
	return (ADC);		
 4ee:	84 b1       	in	r24, 0x04	; 4
 4f0:	95 b1       	in	r25, 0x05	; 5
}
 4f2:	08 95       	ret

000004f4 <writePin>:
}
void pinsDirection(volatile u8* ddr, u8 mask, u8 direction){
	if(direction == OUTPUT)
		SETBits(*ddr,mask);
	else if(direction == INPUT)
		CLRBits(*ddr,mask);
 4f4:	88 30       	cpi	r24, 0x08	; 8
 4f6:	f8 f4       	brcc	.+62     	; 0x536 <writePin+0x42>
 4f8:	61 30       	cpi	r22, 0x01	; 1
 4fa:	69 f4       	brne	.+26     	; 0x516 <writePin+0x22>
 4fc:	4b b3       	in	r20, 0x1b	; 27
 4fe:	21 e0       	ldi	r18, 0x01	; 1
 500:	30 e0       	ldi	r19, 0x00	; 0
 502:	b9 01       	movw	r22, r18
 504:	02 c0       	rjmp	.+4      	; 0x50a <writePin+0x16>
 506:	66 0f       	add	r22, r22
 508:	77 1f       	adc	r23, r23
 50a:	8a 95       	dec	r24
 50c:	e2 f7       	brpl	.-8      	; 0x506 <writePin+0x12>
 50e:	cb 01       	movw	r24, r22
 510:	84 2b       	or	r24, r20
 512:	8b bb       	out	0x1b, r24	; 27
 514:	08 95       	ret
 516:	61 11       	cpse	r22, r1
 518:	79 c0       	rjmp	.+242    	; 0x60c <writePin+0x118>
 51a:	4b b3       	in	r20, 0x1b	; 27
 51c:	21 e0       	ldi	r18, 0x01	; 1
 51e:	30 e0       	ldi	r19, 0x00	; 0
 520:	b9 01       	movw	r22, r18
 522:	02 c0       	rjmp	.+4      	; 0x528 <writePin+0x34>
 524:	66 0f       	add	r22, r22
 526:	77 1f       	adc	r23, r23
 528:	8a 95       	dec	r24
 52a:	e2 f7       	brpl	.-8      	; 0x524 <writePin+0x30>
 52c:	cb 01       	movw	r24, r22
 52e:	80 95       	com	r24
 530:	84 23       	and	r24, r20
 532:	8b bb       	out	0x1b, r24	; 27
 534:	08 95       	ret
 536:	98 ef       	ldi	r25, 0xF8	; 248
 538:	98 0f       	add	r25, r24
 53a:	98 30       	cpi	r25, 0x08	; 8
 53c:	00 f5       	brcc	.+64     	; 0x57e <writePin+0x8a>
 53e:	61 30       	cpi	r22, 0x01	; 1
 540:	69 f4       	brne	.+26     	; 0x55c <writePin+0x68>
 542:	48 b3       	in	r20, 0x18	; 24
 544:	21 e0       	ldi	r18, 0x01	; 1
 546:	30 e0       	ldi	r19, 0x00	; 0
 548:	b9 01       	movw	r22, r18
 54a:	02 c0       	rjmp	.+4      	; 0x550 <writePin+0x5c>
 54c:	66 0f       	add	r22, r22
 54e:	77 1f       	adc	r23, r23
 550:	9a 95       	dec	r25
 552:	e2 f7       	brpl	.-8      	; 0x54c <writePin+0x58>
 554:	cb 01       	movw	r24, r22
 556:	84 2b       	or	r24, r20
 558:	88 bb       	out	0x18, r24	; 24
 55a:	08 95       	ret
 55c:	61 11       	cpse	r22, r1
 55e:	56 c0       	rjmp	.+172    	; 0x60c <writePin+0x118>
 560:	48 b3       	in	r20, 0x18	; 24
 562:	88 50       	subi	r24, 0x08	; 8
 564:	21 e0       	ldi	r18, 0x01	; 1
 566:	30 e0       	ldi	r19, 0x00	; 0
 568:	b9 01       	movw	r22, r18
 56a:	02 c0       	rjmp	.+4      	; 0x570 <writePin+0x7c>
 56c:	66 0f       	add	r22, r22
 56e:	77 1f       	adc	r23, r23
 570:	8a 95       	dec	r24
 572:	e2 f7       	brpl	.-8      	; 0x56c <writePin+0x78>
 574:	cb 01       	movw	r24, r22
 576:	80 95       	com	r24
 578:	84 23       	and	r24, r20
 57a:	88 bb       	out	0x18, r24	; 24
 57c:	08 95       	ret
 57e:	90 ef       	ldi	r25, 0xF0	; 240
 580:	98 0f       	add	r25, r24
 582:	98 30       	cpi	r25, 0x08	; 8
 584:	00 f5       	brcc	.+64     	; 0x5c6 <writePin+0xd2>
 586:	61 30       	cpi	r22, 0x01	; 1
 588:	69 f4       	brne	.+26     	; 0x5a4 <writePin+0xb0>
 58a:	45 b3       	in	r20, 0x15	; 21
 58c:	21 e0       	ldi	r18, 0x01	; 1
 58e:	30 e0       	ldi	r19, 0x00	; 0
 590:	b9 01       	movw	r22, r18
 592:	02 c0       	rjmp	.+4      	; 0x598 <writePin+0xa4>
 594:	66 0f       	add	r22, r22
 596:	77 1f       	adc	r23, r23
 598:	9a 95       	dec	r25
 59a:	e2 f7       	brpl	.-8      	; 0x594 <writePin+0xa0>
 59c:	cb 01       	movw	r24, r22
 59e:	84 2b       	or	r24, r20
 5a0:	85 bb       	out	0x15, r24	; 21
 5a2:	08 95       	ret
 5a4:	61 11       	cpse	r22, r1
 5a6:	32 c0       	rjmp	.+100    	; 0x60c <writePin+0x118>
 5a8:	45 b3       	in	r20, 0x15	; 21
 5aa:	80 51       	subi	r24, 0x10	; 16
 5ac:	21 e0       	ldi	r18, 0x01	; 1
 5ae:	30 e0       	ldi	r19, 0x00	; 0
 5b0:	b9 01       	movw	r22, r18
 5b2:	02 c0       	rjmp	.+4      	; 0x5b8 <writePin+0xc4>
 5b4:	66 0f       	add	r22, r22
 5b6:	77 1f       	adc	r23, r23
 5b8:	8a 95       	dec	r24
 5ba:	e2 f7       	brpl	.-8      	; 0x5b4 <writePin+0xc0>
 5bc:	cb 01       	movw	r24, r22
 5be:	80 95       	com	r24
 5c0:	84 23       	and	r24, r20
 5c2:	85 bb       	out	0x15, r24	; 21
 5c4:	08 95       	ret
 5c6:	98 ee       	ldi	r25, 0xE8	; 232
 5c8:	98 0f       	add	r25, r24
 5ca:	98 30       	cpi	r25, 0x08	; 8
 5cc:	f8 f4       	brcc	.+62     	; 0x60c <writePin+0x118>
 5ce:	61 30       	cpi	r22, 0x01	; 1
 5d0:	69 f4       	brne	.+26     	; 0x5ec <writePin+0xf8>
 5d2:	42 b3       	in	r20, 0x12	; 18
 5d4:	21 e0       	ldi	r18, 0x01	; 1
 5d6:	30 e0       	ldi	r19, 0x00	; 0
 5d8:	b9 01       	movw	r22, r18
 5da:	02 c0       	rjmp	.+4      	; 0x5e0 <writePin+0xec>
 5dc:	66 0f       	add	r22, r22
 5de:	77 1f       	adc	r23, r23
 5e0:	9a 95       	dec	r25
 5e2:	e2 f7       	brpl	.-8      	; 0x5dc <writePin+0xe8>
 5e4:	cb 01       	movw	r24, r22
 5e6:	84 2b       	or	r24, r20
 5e8:	82 bb       	out	0x12, r24	; 18
 5ea:	08 95       	ret
 5ec:	61 11       	cpse	r22, r1
 5ee:	0e c0       	rjmp	.+28     	; 0x60c <writePin+0x118>
 5f0:	42 b3       	in	r20, 0x12	; 18
 5f2:	88 51       	subi	r24, 0x18	; 24
 5f4:	21 e0       	ldi	r18, 0x01	; 1
 5f6:	30 e0       	ldi	r19, 0x00	; 0
 5f8:	b9 01       	movw	r22, r18
 5fa:	02 c0       	rjmp	.+4      	; 0x600 <writePin+0x10c>
 5fc:	66 0f       	add	r22, r22
 5fe:	77 1f       	adc	r23, r23
 600:	8a 95       	dec	r24
 602:	e2 f7       	brpl	.-8      	; 0x5fc <writePin+0x108>
 604:	cb 01       	movw	r24, r22
 606:	80 95       	com	r24
 608:	84 23       	and	r24, r20
 60a:	82 bb       	out	0x12, r24	; 18
 60c:	08 95       	ret

0000060e <pinDirection>:
 60e:	88 30       	cpi	r24, 0x08	; 8
 610:	f8 f4       	brcc	.+62     	; 0x650 <pinDirection+0x42>
 612:	61 30       	cpi	r22, 0x01	; 1
 614:	69 f4       	brne	.+26     	; 0x630 <pinDirection+0x22>
 616:	4a b3       	in	r20, 0x1a	; 26
 618:	21 e0       	ldi	r18, 0x01	; 1
 61a:	30 e0       	ldi	r19, 0x00	; 0
 61c:	b9 01       	movw	r22, r18
 61e:	02 c0       	rjmp	.+4      	; 0x624 <pinDirection+0x16>
 620:	66 0f       	add	r22, r22
 622:	77 1f       	adc	r23, r23
 624:	8a 95       	dec	r24
 626:	e2 f7       	brpl	.-8      	; 0x620 <pinDirection+0x12>
 628:	cb 01       	movw	r24, r22
 62a:	84 2b       	or	r24, r20
 62c:	8a bb       	out	0x1a, r24	; 26
 62e:	08 95       	ret
 630:	61 11       	cpse	r22, r1
 632:	79 c0       	rjmp	.+242    	; 0x726 <pinDirection+0x118>
 634:	4a b3       	in	r20, 0x1a	; 26
 636:	21 e0       	ldi	r18, 0x01	; 1
 638:	30 e0       	ldi	r19, 0x00	; 0
 63a:	b9 01       	movw	r22, r18
 63c:	02 c0       	rjmp	.+4      	; 0x642 <pinDirection+0x34>
 63e:	66 0f       	add	r22, r22
 640:	77 1f       	adc	r23, r23
 642:	8a 95       	dec	r24
 644:	e2 f7       	brpl	.-8      	; 0x63e <pinDirection+0x30>
 646:	cb 01       	movw	r24, r22
 648:	80 95       	com	r24
 64a:	84 23       	and	r24, r20
 64c:	8a bb       	out	0x1a, r24	; 26
 64e:	08 95       	ret
 650:	98 ef       	ldi	r25, 0xF8	; 248
 652:	98 0f       	add	r25, r24
 654:	98 30       	cpi	r25, 0x08	; 8
 656:	00 f5       	brcc	.+64     	; 0x698 <pinDirection+0x8a>
 658:	61 30       	cpi	r22, 0x01	; 1
 65a:	69 f4       	brne	.+26     	; 0x676 <pinDirection+0x68>
 65c:	47 b3       	in	r20, 0x17	; 23
 65e:	21 e0       	ldi	r18, 0x01	; 1
 660:	30 e0       	ldi	r19, 0x00	; 0
 662:	b9 01       	movw	r22, r18
 664:	02 c0       	rjmp	.+4      	; 0x66a <pinDirection+0x5c>
 666:	66 0f       	add	r22, r22
 668:	77 1f       	adc	r23, r23
 66a:	9a 95       	dec	r25
 66c:	e2 f7       	brpl	.-8      	; 0x666 <pinDirection+0x58>
 66e:	cb 01       	movw	r24, r22
 670:	84 2b       	or	r24, r20
 672:	87 bb       	out	0x17, r24	; 23
 674:	08 95       	ret
 676:	61 11       	cpse	r22, r1
 678:	56 c0       	rjmp	.+172    	; 0x726 <pinDirection+0x118>
 67a:	47 b3       	in	r20, 0x17	; 23
 67c:	88 50       	subi	r24, 0x08	; 8
 67e:	21 e0       	ldi	r18, 0x01	; 1
 680:	30 e0       	ldi	r19, 0x00	; 0
 682:	b9 01       	movw	r22, r18
 684:	02 c0       	rjmp	.+4      	; 0x68a <pinDirection+0x7c>
 686:	66 0f       	add	r22, r22
 688:	77 1f       	adc	r23, r23
 68a:	8a 95       	dec	r24
 68c:	e2 f7       	brpl	.-8      	; 0x686 <pinDirection+0x78>
 68e:	cb 01       	movw	r24, r22
 690:	80 95       	com	r24
 692:	84 23       	and	r24, r20
 694:	87 bb       	out	0x17, r24	; 23
 696:	08 95       	ret
 698:	90 ef       	ldi	r25, 0xF0	; 240
 69a:	98 0f       	add	r25, r24
 69c:	98 30       	cpi	r25, 0x08	; 8
 69e:	00 f5       	brcc	.+64     	; 0x6e0 <pinDirection+0xd2>
 6a0:	61 30       	cpi	r22, 0x01	; 1
 6a2:	69 f4       	brne	.+26     	; 0x6be <pinDirection+0xb0>
 6a4:	44 b3       	in	r20, 0x14	; 20
 6a6:	21 e0       	ldi	r18, 0x01	; 1
 6a8:	30 e0       	ldi	r19, 0x00	; 0
 6aa:	b9 01       	movw	r22, r18
 6ac:	02 c0       	rjmp	.+4      	; 0x6b2 <pinDirection+0xa4>
 6ae:	66 0f       	add	r22, r22
 6b0:	77 1f       	adc	r23, r23
 6b2:	9a 95       	dec	r25
 6b4:	e2 f7       	brpl	.-8      	; 0x6ae <pinDirection+0xa0>
 6b6:	cb 01       	movw	r24, r22
 6b8:	84 2b       	or	r24, r20
 6ba:	84 bb       	out	0x14, r24	; 20
 6bc:	08 95       	ret
 6be:	61 11       	cpse	r22, r1
 6c0:	32 c0       	rjmp	.+100    	; 0x726 <pinDirection+0x118>
 6c2:	44 b3       	in	r20, 0x14	; 20
 6c4:	80 51       	subi	r24, 0x10	; 16
 6c6:	21 e0       	ldi	r18, 0x01	; 1
 6c8:	30 e0       	ldi	r19, 0x00	; 0
 6ca:	b9 01       	movw	r22, r18
 6cc:	02 c0       	rjmp	.+4      	; 0x6d2 <pinDirection+0xc4>
 6ce:	66 0f       	add	r22, r22
 6d0:	77 1f       	adc	r23, r23
 6d2:	8a 95       	dec	r24
 6d4:	e2 f7       	brpl	.-8      	; 0x6ce <pinDirection+0xc0>
 6d6:	cb 01       	movw	r24, r22
 6d8:	80 95       	com	r24
 6da:	84 23       	and	r24, r20
 6dc:	84 bb       	out	0x14, r24	; 20
 6de:	08 95       	ret
 6e0:	98 ee       	ldi	r25, 0xE8	; 232
 6e2:	98 0f       	add	r25, r24
 6e4:	98 30       	cpi	r25, 0x08	; 8
 6e6:	f8 f4       	brcc	.+62     	; 0x726 <pinDirection+0x118>
 6e8:	61 30       	cpi	r22, 0x01	; 1
 6ea:	69 f4       	brne	.+26     	; 0x706 <pinDirection+0xf8>
 6ec:	41 b3       	in	r20, 0x11	; 17
 6ee:	21 e0       	ldi	r18, 0x01	; 1
 6f0:	30 e0       	ldi	r19, 0x00	; 0
 6f2:	b9 01       	movw	r22, r18
 6f4:	02 c0       	rjmp	.+4      	; 0x6fa <pinDirection+0xec>
 6f6:	66 0f       	add	r22, r22
 6f8:	77 1f       	adc	r23, r23
 6fa:	9a 95       	dec	r25
 6fc:	e2 f7       	brpl	.-8      	; 0x6f6 <pinDirection+0xe8>
 6fe:	cb 01       	movw	r24, r22
 700:	84 2b       	or	r24, r20
 702:	81 bb       	out	0x11, r24	; 17
 704:	08 95       	ret
 706:	61 11       	cpse	r22, r1
 708:	0e c0       	rjmp	.+28     	; 0x726 <pinDirection+0x118>
 70a:	41 b3       	in	r20, 0x11	; 17
 70c:	88 51       	subi	r24, 0x18	; 24
 70e:	21 e0       	ldi	r18, 0x01	; 1
 710:	30 e0       	ldi	r19, 0x00	; 0
 712:	b9 01       	movw	r22, r18
 714:	02 c0       	rjmp	.+4      	; 0x71a <pinDirection+0x10c>
 716:	66 0f       	add	r22, r22
 718:	77 1f       	adc	r23, r23
 71a:	8a 95       	dec	r24
 71c:	e2 f7       	brpl	.-8      	; 0x716 <pinDirection+0x108>
 71e:	cb 01       	movw	r24, r22
 720:	80 95       	com	r24
 722:	84 23       	and	r24, r20
 724:	81 bb       	out	0x11, r24	; 17
 726:	08 95       	ret

00000728 <writePins>:
 728:	41 30       	cpi	r20, 0x01	; 1
 72a:	29 f4       	brne	.+10     	; 0x736 <writePins+0xe>
 72c:	fc 01       	movw	r30, r24
 72e:	20 81       	ld	r18, Z
 730:	62 2b       	or	r22, r18
 732:	60 83       	st	Z, r22
 734:	08 95       	ret
 736:	41 11       	cpse	r20, r1
 738:	05 c0       	rjmp	.+10     	; 0x744 <writePins+0x1c>
 73a:	fc 01       	movw	r30, r24
 73c:	20 81       	ld	r18, Z
 73e:	60 95       	com	r22
 740:	62 23       	and	r22, r18
 742:	60 83       	st	Z, r22
 744:	08 95       	ret

00000746 <writeAllPin>:
	else{}
}

/*for all bits*/
void writeAllPin(volatile u8* port,u8 logic){
	if(logic==HIGH)
 746:	61 30       	cpi	r22, 0x01	; 1
 748:	21 f4       	brne	.+8      	; 0x752 <writeAllPin+0xc>
		SETALLBits(*port);
 74a:	2f ef       	ldi	r18, 0xFF	; 255
 74c:	fc 01       	movw	r30, r24
 74e:	20 83       	st	Z, r18
 750:	08 95       	ret
	else if(logic==LOW)
 752:	61 11       	cpse	r22, r1
 754:	02 c0       	rjmp	.+4      	; 0x75a <writeAllPin+0x14>
		CLRALLBits(*port);
 756:	fc 01       	movw	r30, r24
 758:	10 82       	st	Z, r1
 75a:	08 95       	ret

0000075c <GLOBAL_INT_EN>:
	GLOBAL_INT_EN();
}

void GLOBAL_INT_EN(void)
{
	writePins( &SREG,0x80,HIGH );
 75c:	41 e0       	ldi	r20, 0x01	; 1
 75e:	60 e8       	ldi	r22, 0x80	; 128
 760:	8f e5       	ldi	r24, 0x5F	; 95
 762:	90 e0       	ldi	r25, 0x00	; 0
 764:	0e 94 94 03 	call	0x728	; 0x728 <writePins>
 768:	08 95       	ret

0000076a <INT_init>:
 */ 
#include "EXT_INT.h"

void INT_init(u8 int_num , u8 sense_control)
{
	switch(int_num)
 76a:	86 30       	cpi	r24, 0x06	; 6
 76c:	b9 f0       	breq	.+46     	; 0x79c <INT_init+0x32>
 76e:	87 30       	cpi	r24, 0x07	; 7
 770:	f9 f0       	breq	.+62     	; 0x7b0 <INT_init+0x46>
 772:	85 30       	cpi	r24, 0x05	; 5
 774:	41 f5       	brne	.+80     	; 0x7c6 <INT_init+0x5c>
	{
		case INT_2:
		MCUCSR|=((sense_control & 0x01)<<6);
 776:	84 b7       	in	r24, 0x34	; 52
 778:	26 2f       	mov	r18, r22
 77a:	21 70       	andi	r18, 0x01	; 1
 77c:	30 e0       	ldi	r19, 0x00	; 0
 77e:	00 24       	eor	r0, r0
 780:	36 95       	lsr	r19
 782:	27 95       	ror	r18
 784:	07 94       	ror	r0
 786:	36 95       	lsr	r19
 788:	27 95       	ror	r18
 78a:	07 94       	ror	r0
 78c:	32 2f       	mov	r19, r18
 78e:	20 2d       	mov	r18, r0
 790:	28 2b       	or	r18, r24
 792:	24 bf       	out	0x34, r18	; 52
		SETBit(GICR,INT_2);
 794:	8b b7       	in	r24, 0x3b	; 59
 796:	80 62       	ori	r24, 0x20	; 32
 798:	8b bf       	out	0x3b, r24	; 59
		break;
 79a:	15 c0       	rjmp	.+42     	; 0x7c6 <INT_init+0x5c>
		
		case INT_0:
		CLRBits(MCUCR,INT0_ISC_MSK);
 79c:	85 b7       	in	r24, 0x35	; 53
 79e:	8c 7f       	andi	r24, 0xFC	; 252
 7a0:	85 bf       	out	0x35, r24	; 53
		SETBits(MCUCR,sense_control<<INT0_ISC_POS);
 7a2:	85 b7       	in	r24, 0x35	; 53
 7a4:	68 2b       	or	r22, r24
 7a6:	65 bf       	out	0x35, r22	; 53
		SETBit(GICR,INT_0);
 7a8:	8b b7       	in	r24, 0x3b	; 59
 7aa:	80 64       	ori	r24, 0x40	; 64
 7ac:	8b bf       	out	0x3b, r24	; 59
		break;
 7ae:	0b c0       	rjmp	.+22     	; 0x7c6 <INT_init+0x5c>
		case INT_1:
		CLRBits(MCUCR,INT1_ISC_MSK);
 7b0:	85 b7       	in	r24, 0x35	; 53
 7b2:	83 7f       	andi	r24, 0xF3	; 243
 7b4:	85 bf       	out	0x35, r24	; 53
		SETBits(MCUCR,sense_control<<INT1_ISC_POS);
 7b6:	85 b7       	in	r24, 0x35	; 53
 7b8:	66 0f       	add	r22, r22
 7ba:	66 0f       	add	r22, r22
 7bc:	68 2b       	or	r22, r24
 7be:	65 bf       	out	0x35, r22	; 53
		SETBit(GICR,INT_1);
 7c0:	8b b7       	in	r24, 0x3b	; 59
 7c2:	80 68       	ori	r24, 0x80	; 128
 7c4:	8b bf       	out	0x3b, r24	; 59
	}
	GLOBAL_INT_EN();
 7c6:	0e 94 ae 03 	call	0x75c	; 0x75c <GLOBAL_INT_EN>
 7ca:	08 95       	ret

000007cc <SPI_Init>:
#include "SPI.h"
void SPI_Init(SPI_Mode spiMode){
	switch(spiMode){
 7cc:	88 23       	and	r24, r24
 7ce:	19 f0       	breq	.+6      	; 0x7d6 <SPI_Init+0xa>
 7d0:	81 30       	cpi	r24, 0x01	; 1
 7d2:	69 f0       	breq	.+26     	; 0x7ee <SPI_Init+0x22>
 7d4:	08 95       	ret
	case SPI_MASTER:
	SETBit(SPI_DDR,SPI_SS);
 7d6:	bc 9a       	sbi	0x17, 4	; 23
	SETBit(SPI_DDR,SPI_SCK);
 7d8:	bf 9a       	sbi	0x17, 7	; 23
	SETBit(SPI_DDR,SPI_MOSI);
 7da:	bd 9a       	sbi	0x17, 5	; 23
	CLRBit(SPI_DDR,SPI_MISO);
 7dc:	be 98       	cbi	0x17, 6	; 23
	
		SETBit(SPCR,SPR0);
 7de:	68 9a       	sbi	0x0d, 0	; 13
		SETBit(SPCR,MSTR);
 7e0:	6c 9a       	sbi	0x0d, 4	; 13
		SETBit(SPCR,SPE);
 7e2:	6e 9a       	sbi	0x0d, 6	; 13
	    writePin(PB4,HIGH);
 7e4:	61 e0       	ldi	r22, 0x01	; 1
 7e6:	8c e0       	ldi	r24, 0x0C	; 12
 7e8:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <writePin>

	break;
 7ec:	08 95       	ret
	case SPI_SLAVE:
	CLRBit(SPI_DDR,SPI_SS);
 7ee:	bc 98       	cbi	0x17, 4	; 23
	CLRBit(SPI_DDR,SPI_SCK);
 7f0:	bf 98       	cbi	0x17, 7	; 23
	CLRBit(SPI_DDR,SPI_MOSI);
 7f2:	bd 98       	cbi	0x17, 5	; 23
	SETBit(SPI_DDR,SPI_MISO);
 7f4:	be 9a       	sbi	0x17, 6	; 23
	
		CLRBit(SPCR,MSTR);
 7f6:	6c 98       	cbi	0x0d, 4	; 13
		SETBit(SPCR,SPE);
 7f8:	6e 9a       	sbi	0x0d, 6	; 13
 7fa:	08 95       	ret

000007fc <SPI_Transceive>:

	break;
	}
}
u8 SPI_Transceive(u8 data){
		SPDR = data;
 7fc:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & (1<<SPIF)));
 7fe:	77 9b       	sbis	0x0e, 7	; 14
 800:	fe cf       	rjmp	.-4      	; 0x7fe <SPI_Transceive+0x2>
 802:	8f ec       	ldi	r24, 0xCF	; 207
 804:	97 e0       	ldi	r25, 0x07	; 7
 806:	01 97       	sbiw	r24, 0x01	; 1
 808:	f1 f7       	brne	.-4      	; 0x806 <SPI_Transceive+0xa>
 80a:	00 c0       	rjmp	.+0      	; 0x80c <SPI_Transceive+0x10>
 80c:	00 00       	nop
		_delay_ms(1);
		return SPDR;
 80e:	8f b1       	in	r24, 0x0f	; 15
}
 810:	08 95       	ret

00000812 <Timer0_Start>:
void set_dutycycleTimer1(u16 duty)       //1->2         overal time 20->4999
{                                                          //        0->125
	OCR1A=125+(125*duty)/180;                              //        180->250
}														//       90->188
void timer_delay_ms(u32 delay){
	timer_delay_us(1000*delay);
 812:	83 b7       	in	r24, 0x33	; 51
 814:	8e 7f       	andi	r24, 0xFE	; 254
 816:	83 bf       	out	0x33, r24	; 51
 818:	83 b7       	in	r24, 0x33	; 51
 81a:	82 60       	ori	r24, 0x02	; 2
 81c:	83 bf       	out	0x33, r24	; 51
 81e:	83 b7       	in	r24, 0x33	; 51
 820:	8b 7f       	andi	r24, 0xFB	; 251
 822:	83 bf       	out	0x33, r24	; 51
 824:	08 95       	ret

00000826 <Timer0_Stop>:
 826:	83 b7       	in	r24, 0x33	; 51
 828:	8e 7f       	andi	r24, 0xFE	; 254
 82a:	83 bf       	out	0x33, r24	; 51
 82c:	83 b7       	in	r24, 0x33	; 51
 82e:	8d 7f       	andi	r24, 0xFD	; 253
 830:	83 bf       	out	0x33, r24	; 51
 832:	83 b7       	in	r24, 0x33	; 51
 834:	8b 7f       	andi	r24, 0xFB	; 251
 836:	83 bf       	out	0x33, r24	; 51
 838:	08 95       	ret

0000083a <Timer0_Init>:
 83a:	88 23       	and	r24, r24
 83c:	19 f0       	breq	.+6      	; 0x844 <Timer0_Init+0xa>
 83e:	83 30       	cpi	r24, 0x03	; 3
 840:	71 f0       	breq	.+28     	; 0x85e <Timer0_Init+0x24>
 842:	08 95       	ret
 844:	83 b7       	in	r24, 0x33	; 51
 846:	87 7f       	andi	r24, 0xF7	; 247
 848:	83 bf       	out	0x33, r24	; 51
 84a:	83 b7       	in	r24, 0x33	; 51
 84c:	8f 7b       	andi	r24, 0xBF	; 191
 84e:	83 bf       	out	0x33, r24	; 51
 850:	0e 94 13 04 	call	0x826	; 0x826 <Timer0_Stop>
 854:	89 b7       	in	r24, 0x39	; 57
 856:	81 60       	ori	r24, 0x01	; 1
 858:	89 bf       	out	0x39, r24	; 57
 85a:	78 94       	sei
 85c:	08 95       	ret
 85e:	83 b7       	in	r24, 0x33	; 51
 860:	88 60       	ori	r24, 0x08	; 8
 862:	83 bf       	out	0x33, r24	; 51
 864:	83 b7       	in	r24, 0x33	; 51
 866:	80 64       	ori	r24, 0x40	; 64
 868:	83 bf       	out	0x33, r24	; 51
 86a:	83 b7       	in	r24, 0x33	; 51
 86c:	80 62       	ori	r24, 0x20	; 32
 86e:	83 bf       	out	0x33, r24	; 51
 870:	83 b7       	in	r24, 0x33	; 51
 872:	8f 7e       	andi	r24, 0xEF	; 239
 874:	83 bf       	out	0x33, r24	; 51
 876:	83 b7       	in	r24, 0x33	; 51
 878:	81 60       	ori	r24, 0x01	; 1
 87a:	83 bf       	out	0x33, r24	; 51
 87c:	83 b7       	in	r24, 0x33	; 51
 87e:	8d 7f       	andi	r24, 0xFD	; 253
 880:	83 bf       	out	0x33, r24	; 51
 882:	83 b7       	in	r24, 0x33	; 51
 884:	84 60       	ori	r24, 0x04	; 4
 886:	83 bf       	out	0x33, r24	; 51
 888:	08 95       	ret

0000088a <ResetTimer>:
 88a:	12 be       	out	0x32, r1	; 50
 88c:	10 92 8f 00 	sts	0x008F, r1	; 0x80008f <overflow>
 890:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <overflow+0x1>
 894:	10 92 91 00 	sts	0x0091, r1	; 0x800091 <overflow+0x2>
 898:	10 92 92 00 	sts	0x0092, r1	; 0x800092 <overflow+0x3>
 89c:	08 95       	ret

0000089e <Timer0_RunFun>:
volatile u32 callBackTime = 0;
volatile u32 periodic = TRUE;
volatile u32 calcOverFlows = 0;
volatile u8 calcTCNT = 0;
/* Asyc Call - Callbacks*/
void Timer0_RunFun(void (*pFun)(void), u32 periodic, BOOL isPeriodic){
 89e:	cf 92       	push	r12
 8a0:	df 92       	push	r13
 8a2:	ef 92       	push	r14
 8a4:	ff 92       	push	r15
 8a6:	6a 01       	movw	r12, r20
 8a8:	7b 01       	movw	r14, r22
	CallAgian = pFun;
 8aa:	90 93 9c 00 	sts	0x009C, r25	; 0x80009c <CallAgian+0x1>
 8ae:	80 93 9b 00 	sts	0x009B, r24	; 0x80009b <CallAgian>
	callBackTime = periodic;
 8b2:	40 93 8b 00 	sts	0x008B, r20	; 0x80008b <callBackTime>
 8b6:	50 93 8c 00 	sts	0x008C, r21	; 0x80008c <callBackTime+0x1>
 8ba:	60 93 8d 00 	sts	0x008D, r22	; 0x80008d <callBackTime+0x2>
 8be:	70 93 8e 00 	sts	0x008E, r23	; 0x80008e <callBackTime+0x3>
	ResetTimer();
 8c2:	0e 94 45 04 	call	0x88a	; 0x88a <ResetTimer>
	TCNT0 = 256 - ((periodic*1000)%256) - 1;
 8c6:	88 ee       	ldi	r24, 0xE8	; 232
 8c8:	c8 9e       	mul	r12, r24
 8ca:	80 2d       	mov	r24, r0
 8cc:	11 24       	eor	r1, r1
 8ce:	80 95       	com	r24
 8d0:	82 bf       	out	0x32, r24	; 50
	calcTCNT = TCNT0;
 8d2:	82 b7       	in	r24, 0x32	; 50
 8d4:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <calcTCNT>
	calcOverFlows = ((periodic*1000)/256) + 1;
 8d8:	a8 ee       	ldi	r26, 0xE8	; 232
 8da:	b3 e0       	ldi	r27, 0x03	; 3
 8dc:	a7 01       	movw	r20, r14
 8de:	96 01       	movw	r18, r12
 8e0:	0e 94 a4 07 	call	0xf48	; 0xf48 <__muluhisi3>
 8e4:	bb 27       	eor	r27, r27
 8e6:	a9 2f       	mov	r26, r25
 8e8:	98 2f       	mov	r25, r24
 8ea:	87 2f       	mov	r24, r23
 8ec:	01 96       	adiw	r24, 0x01	; 1
 8ee:	a1 1d       	adc	r26, r1
 8f0:	b1 1d       	adc	r27, r1
 8f2:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <calcOverFlows>
 8f6:	90 93 88 00 	sts	0x0088, r25	; 0x800088 <calcOverFlows+0x1>
 8fa:	a0 93 89 00 	sts	0x0089, r26	; 0x800089 <calcOverFlows+0x2>
 8fe:	b0 93 8a 00 	sts	0x008A, r27	; 0x80008a <calcOverFlows+0x3>
	Timer0_Start();
 902:	0e 94 09 04 	call	0x812	; 0x812 <Timer0_Start>
}
 906:	ff 90       	pop	r15
 908:	ef 90       	pop	r14
 90a:	df 90       	pop	r13
 90c:	cf 90       	pop	r12
 90e:	08 95       	ret

00000910 <__vector_11>:
ISR(TIMER0_OVF_vect){
 910:	1f 92       	push	r1
 912:	0f 92       	push	r0
 914:	0f b6       	in	r0, 0x3f	; 63
 916:	0f 92       	push	r0
 918:	11 24       	eor	r1, r1
 91a:	2f 93       	push	r18
 91c:	3f 93       	push	r19
 91e:	4f 93       	push	r20
 920:	5f 93       	push	r21
 922:	6f 93       	push	r22
 924:	7f 93       	push	r23
 926:	8f 93       	push	r24
 928:	9f 93       	push	r25
 92a:	af 93       	push	r26
 92c:	bf 93       	push	r27
 92e:	ef 93       	push	r30
 930:	ff 93       	push	r31
	overflow++;
 932:	80 91 8f 00 	lds	r24, 0x008F	; 0x80008f <overflow>
 936:	90 91 90 00 	lds	r25, 0x0090	; 0x800090 <overflow+0x1>
 93a:	a0 91 91 00 	lds	r26, 0x0091	; 0x800091 <overflow+0x2>
 93e:	b0 91 92 00 	lds	r27, 0x0092	; 0x800092 <overflow+0x3>
 942:	01 96       	adiw	r24, 0x01	; 1
 944:	a1 1d       	adc	r26, r1
 946:	b1 1d       	adc	r27, r1
 948:	80 93 8f 00 	sts	0x008F, r24	; 0x80008f <overflow>
 94c:	90 93 90 00 	sts	0x0090, r25	; 0x800090 <overflow+0x1>
 950:	a0 93 91 00 	sts	0x0091, r26	; 0x800091 <overflow+0x2>
 954:	b0 93 92 00 	sts	0x0092, r27	; 0x800092 <overflow+0x3>
	if(overflow == calcOverFlows){
 958:	40 91 8f 00 	lds	r20, 0x008F	; 0x80008f <overflow>
 95c:	50 91 90 00 	lds	r21, 0x0090	; 0x800090 <overflow+0x1>
 960:	60 91 91 00 	lds	r22, 0x0091	; 0x800091 <overflow+0x2>
 964:	70 91 92 00 	lds	r23, 0x0092	; 0x800092 <overflow+0x3>
 968:	80 91 87 00 	lds	r24, 0x0087	; 0x800087 <calcOverFlows>
 96c:	90 91 88 00 	lds	r25, 0x0088	; 0x800088 <calcOverFlows+0x1>
 970:	a0 91 89 00 	lds	r26, 0x0089	; 0x800089 <calcOverFlows+0x2>
 974:	b0 91 8a 00 	lds	r27, 0x008A	; 0x80008a <calcOverFlows+0x3>
 978:	48 17       	cp	r20, r24
 97a:	59 07       	cpc	r21, r25
 97c:	6a 07       	cpc	r22, r26
 97e:	7b 07       	cpc	r23, r27
 980:	f9 f4       	brne	.+62     	; 0x9c0 <__vector_11+0xb0>
		if(periodic == TRUE){
 982:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <periodic>
 986:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <periodic+0x1>
 98a:	a0 91 63 00 	lds	r26, 0x0063	; 0x800063 <periodic+0x2>
 98e:	b0 91 64 00 	lds	r27, 0x0064	; 0x800064 <periodic+0x3>
 992:	01 97       	sbiw	r24, 0x01	; 1
 994:	a1 05       	cpc	r26, r1
 996:	b1 05       	cpc	r27, r1
 998:	61 f4       	brne	.+24     	; 0x9b2 <__vector_11+0xa2>
			TCNT0 = calcTCNT;
 99a:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <calcTCNT>
 99e:	82 bf       	out	0x32, r24	; 50
			overflow = 0;
 9a0:	10 92 8f 00 	sts	0x008F, r1	; 0x80008f <overflow>
 9a4:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <overflow+0x1>
 9a8:	10 92 91 00 	sts	0x0091, r1	; 0x800091 <overflow+0x2>
 9ac:	10 92 92 00 	sts	0x0092, r1	; 0x800092 <overflow+0x3>
 9b0:	02 c0       	rjmp	.+4      	; 0x9b6 <__vector_11+0xa6>
		}
		else{
			Timer0_Stop();
 9b2:	0e 94 13 04 	call	0x826	; 0x826 <Timer0_Stop>
			}
		CallAgian();
 9b6:	e0 91 9b 00 	lds	r30, 0x009B	; 0x80009b <CallAgian>
 9ba:	f0 91 9c 00 	lds	r31, 0x009C	; 0x80009c <CallAgian+0x1>
 9be:	09 95       	icall
	}
 9c0:	ff 91       	pop	r31
 9c2:	ef 91       	pop	r30
 9c4:	bf 91       	pop	r27
 9c6:	af 91       	pop	r26
 9c8:	9f 91       	pop	r25
 9ca:	8f 91       	pop	r24
 9cc:	7f 91       	pop	r23
 9ce:	6f 91       	pop	r22
 9d0:	5f 91       	pop	r21
 9d2:	4f 91       	pop	r20
 9d4:	3f 91       	pop	r19
 9d6:	2f 91       	pop	r18
 9d8:	0f 90       	pop	r0
 9da:	0f be       	out	0x3f, r0	; 63
 9dc:	0f 90       	pop	r0
 9de:	1f 90       	pop	r1
 9e0:	18 95       	reti

000009e2 <system_init>:
extern u8 setFlag;
u16 i=0;
u8 j=0;
void system_init(void)
{
	INT_init(INT_0, falling_edge);	/*interrupt 1 activation*/
 9e2:	62 e0       	ldi	r22, 0x02	; 2
 9e4:	86 e0       	ldi	r24, 0x06	; 6
 9e6:	0e 94 b5 03 	call	0x76a	; 0x76a <INT_init>
	INT_init(INT_1, falling_edge);	/*interrupt 2 activation*/
 9ea:	62 e0       	ldi	r22, 0x02	; 2
 9ec:	87 e0       	ldi	r24, 0x07	; 7
 9ee:	0e 94 b5 03 	call	0x76a	; 0x76a <INT_init>
	INT_init(INT_2,falling_edge);	/*interrupt 2 activation*/
 9f2:	62 e0       	ldi	r22, 0x02	; 2
 9f4:	85 e0       	ldi	r24, 0x05	; 5
 9f6:	0e 94 b5 03 	call	0x76a	; 0x76a <INT_init>
	SPI_Init(SPI_MASTER);
 9fa:	80 e0       	ldi	r24, 0x00	; 0
 9fc:	0e 94 e6 03 	call	0x7cc	; 0x7cc <SPI_Init>
	pinDirection(PD2,INPUT);	/*set interrupt 1 as INPUT*/
 a00:	60 e0       	ldi	r22, 0x00	; 0
 a02:	8a e1       	ldi	r24, 0x1A	; 26
 a04:	0e 94 07 03 	call	0x60e	; 0x60e <pinDirection>
	pinDirection(PD3,INPUT);	/*set interrupt 2 as INPUT*/
 a08:	60 e0       	ldi	r22, 0x00	; 0
 a0a:	8b e1       	ldi	r24, 0x1B	; 27
 a0c:	0e 94 07 03 	call	0x60e	; 0x60e <pinDirection>
	pinDirection(PB2,INPUT);	/*set interrupt 3 as INPUT*/
 a10:	60 e0       	ldi	r22, 0x00	; 0
 a12:	8a e0       	ldi	r24, 0x0A	; 10
 a14:	0e 94 07 03 	call	0x60e	; 0x60e <pinDirection>
	pinDirection(COOLER_PIN,OUTPUT);	
 a18:	61 e0       	ldi	r22, 0x01	; 1
 a1a:	84 e0       	ldi	r24, 0x04	; 4
 a1c:	0e 94 07 03 	call	0x60e	; 0x60e <pinDirection>
	pinDirection(HEATER_PIN,OUTPUT);
 a20:	61 e0       	ldi	r22, 0x01	; 1
 a22:	8b e0       	ldi	r24, 0x0B	; 11
 a24:	0e 94 07 03 	call	0x60e	; 0x60e <pinDirection>
	pinDirection(HEATING_ELEMENT_LED,OUTPUT);
 a28:	61 e0       	ldi	r22, 0x01	; 1
 a2a:	85 e0       	ldi	r24, 0x05	; 5
 a2c:	0e 94 07 03 	call	0x60e	; 0x60e <pinDirection>
	writePin(COOLER_PIN,LOW);
 a30:	60 e0       	ldi	r22, 0x00	; 0
 a32:	84 e0       	ldi	r24, 0x04	; 4
 a34:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <writePin>
	writePin(HEATER_PIN,LOW);
 a38:	60 e0       	ldi	r22, 0x00	; 0
 a3a:	8b e0       	ldi	r24, 0x0B	; 11
 a3c:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <writePin>
	eepromTemp=readEEPROM(0x00);	/*reading set temperature form external eeprom*/
 a40:	80 e0       	ldi	r24, 0x00	; 0
 a42:	90 e0       	ldi	r25, 0x00	; 0
 a44:	0e 94 27 01 	call	0x24e	; 0x24e <readEEPROM>
 a48:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <eepromTemp>
	Timer0_Init(NORMAL);
 a4c:	80 e0       	ldi	r24, 0x00	; 0
 a4e:	0e 94 1d 04 	call	0x83a	; 0x83a <Timer0_Init>
	Seg_init();
 a52:	0e 94 c0 01 	call	0x380	; 0x380 <Seg_init>
	ADC_init();
 a56:	0e 94 69 02 	call	0x4d2	; 0x4d2 <ADC_init>
 a5a:	08 95       	ret

00000a5c <temperatureControl>:
}
void temperatureControl(void)
{
	static u8 flag=2;
		if(((u8)temp)<(set_temp-4))
 a5c:	60 91 7e 00 	lds	r22, 0x007E	; 0x80007e <__data_end>
 a60:	70 91 7f 00 	lds	r23, 0x007F	; 0x80007f <__data_end+0x1>
 a64:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__data_end+0x2>
 a68:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <__data_end+0x3>
 a6c:	0e 94 49 06 	call	0xc92	; 0xc92 <__fixunssfsi>
 a70:	70 e0       	ldi	r23, 0x00	; 0
 a72:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 a76:	90 e0       	ldi	r25, 0x00	; 0
 a78:	9c 01       	movw	r18, r24
 a7a:	24 50       	subi	r18, 0x04	; 4
 a7c:	31 09       	sbc	r19, r1
 a7e:	62 17       	cp	r22, r18
 a80:	73 07       	cpc	r23, r19
 a82:	74 f4       	brge	.+28     	; 0xaa0 <temperatureControl+0x44>
				{
					
					flag=0;
 a84:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <flag.2039>
					flag=1;
				}
				
	if(((u8)temp)<(set_temp-4)&& (flag==0))			//heater on
	{
		writePin(HEATER_PIN,HIGH);
 a88:	61 e0       	ldi	r22, 0x01	; 1
 a8a:	8b e0       	ldi	r24, 0x0B	; 11
 a8c:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <writePin>
			while(i<300)
 a90:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <i>
 a94:	90 91 94 00 	lds	r25, 0x0094	; 0x800094 <i+0x1>
 a98:	8c 32       	cpi	r24, 0x2C	; 44
 a9a:	91 40       	sbci	r25, 0x01	; 1
 a9c:	60 f0       	brcs	.+24     	; 0xab6 <temperatureControl+0x5a>
 a9e:	1b c0       	rjmp	.+54     	; 0xad6 <temperatureControl+0x7a>
				{
					
					flag=0;

				}
		else if(((u8)temp)>(set_temp+4))
 aa0:	9c 01       	movw	r18, r24
 aa2:	2c 5f       	subi	r18, 0xFC	; 252
 aa4:	3f 4f       	sbci	r19, 0xFF	; 255
 aa6:	26 17       	cp	r18, r22
 aa8:	37 07       	cpc	r19, r23
 aaa:	0c f0       	brlt	.+2      	; 0xaae <temperatureControl+0x52>
 aac:	5b c0       	rjmp	.+182    	; 0xb64 <temperatureControl+0x108>
				{
					flag=1;
 aae:	21 e0       	ldi	r18, 0x01	; 1
 ab0:	20 93 65 00 	sts	0x0065, r18	; 0x800065 <flag.2039>
 ab4:	57 c0       	rjmp	.+174    	; 0xb64 <temperatureControl+0x108>
	if(((u8)temp)<(set_temp-4)&& (flag==0))			//heater on
	{
		writePin(HEATER_PIN,HIGH);
			while(i<300)
			{
				writePin(HEATING_ELEMENT_LED,HIGH);
 ab6:	61 e0       	ldi	r22, 0x01	; 1
 ab8:	85 e0       	ldi	r24, 0x05	; 5
 aba:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <writePin>
				i++;
 abe:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <i>
 ac2:	90 91 94 00 	lds	r25, 0x0094	; 0x800094 <i+0x1>
 ac6:	01 96       	adiw	r24, 0x01	; 1
 ac8:	90 93 94 00 	sts	0x0094, r25	; 0x800094 <i+0x1>
 acc:	80 93 93 00 	sts	0x0093, r24	; 0x800093 <i>
				}
				
	if(((u8)temp)<(set_temp-4)&& (flag==0))			//heater on
	{
		writePin(HEATER_PIN,HIGH);
			while(i<300)
 ad0:	8c 32       	cpi	r24, 0x2C	; 44
 ad2:	91 40       	sbci	r25, 0x01	; 1
 ad4:	80 f3       	brcs	.-32     	; 0xab6 <temperatureControl+0x5a>
			{
				writePin(HEATING_ELEMENT_LED,HIGH);
				i++;
			}
			writePin(HEATING_ELEMENT_LED,LOW);
 ad6:	60 e0       	ldi	r22, 0x00	; 0
 ad8:	85 e0       	ldi	r24, 0x05	; 5
 ada:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <writePin>
			i=0;
 ade:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <i+0x1>
 ae2:	10 92 93 00 	sts	0x0093, r1	; 0x800093 <i>
		writePin(COOLER_PIN,LOW);
 ae6:	60 e0       	ldi	r22, 0x00	; 0
 ae8:	84 e0       	ldi	r24, 0x04	; 4
 aea:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <writePin>
		if(((u8)temp)<(set_temp-4))		
 aee:	60 91 7e 00 	lds	r22, 0x007E	; 0x80007e <__data_end>
 af2:	70 91 7f 00 	lds	r23, 0x007F	; 0x80007f <__data_end+0x1>
 af6:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__data_end+0x2>
 afa:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <__data_end+0x3>
 afe:	0e 94 49 06 	call	0xc92	; 0xc92 <__fixunssfsi>
 b02:	70 e0       	ldi	r23, 0x00	; 0
 b04:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 b08:	90 e0       	ldi	r25, 0x00	; 0
 b0a:	04 97       	sbiw	r24, 0x04	; 4
 b0c:	68 17       	cp	r22, r24
 b0e:	79 07       	cpc	r23, r25
 b10:	6c f5       	brge	.+90     	; 0xb6c <temperatureControl+0x110>
		flag=1;
 b12:	81 e0       	ldi	r24, 0x01	; 1
 b14:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <flag.2039>
 b18:	08 95       	ret
	}
	
	else if(((u8)temp) > (set_temp+4)&& (flag==1))	//cooler on
 b1a:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <flag.2039>
 b1e:	81 30       	cpi	r24, 0x01	; 1
 b20:	29 f5       	brne	.+74     	; 0xb6c <temperatureControl+0x110>
	{
		writePin(HEATER_PIN,LOW);
 b22:	60 e0       	ldi	r22, 0x00	; 0
 b24:	8b e0       	ldi	r24, 0x0B	; 11
 b26:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <writePin>
		writePin(COOLER_PIN,HIGH);
 b2a:	61 e0       	ldi	r22, 0x01	; 1
 b2c:	84 e0       	ldi	r24, 0x04	; 4
 b2e:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <writePin>
		writePin(HEATING_ELEMENT_LED,HIGH);
 b32:	61 e0       	ldi	r22, 0x01	; 1
 b34:	85 e0       	ldi	r24, 0x05	; 5
 b36:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <writePin>
		if(((u8)temp) > (set_temp+4))
 b3a:	60 91 7e 00 	lds	r22, 0x007E	; 0x80007e <__data_end>
 b3e:	70 91 7f 00 	lds	r23, 0x007F	; 0x80007f <__data_end+0x1>
 b42:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__data_end+0x2>
 b46:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <__data_end+0x3>
 b4a:	0e 94 49 06 	call	0xc92	; 0xc92 <__fixunssfsi>
 b4e:	70 e0       	ldi	r23, 0x00	; 0
 b50:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 b54:	90 e0       	ldi	r25, 0x00	; 0
 b56:	04 96       	adiw	r24, 0x04	; 4
 b58:	86 17       	cp	r24, r22
 b5a:	97 07       	cpc	r25, r23
 b5c:	3c f4       	brge	.+14     	; 0xb6c <temperatureControl+0x110>
		flag=0;
 b5e:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <flag.2039>
 b62:	08 95       	ret
		writePin(COOLER_PIN,LOW);
		if(((u8)temp)<(set_temp-4))		
		flag=1;
	}
	
	else if(((u8)temp) > (set_temp+4)&& (flag==1))	//cooler on
 b64:	04 96       	adiw	r24, 0x04	; 4
 b66:	86 17       	cp	r24, r22
 b68:	97 07       	cpc	r25, r23
 b6a:	bc f2       	brlt	.-82     	; 0xb1a <temperatureControl+0xbe>
 b6c:	08 95       	ret

00000b6e <disable>:
		flag=0;
	}
}
void disable(void)
{
	writeAllPin(&PORTA,LOW);
 b6e:	60 e0       	ldi	r22, 0x00	; 0
 b70:	8b e3       	ldi	r24, 0x3B	; 59
 b72:	90 e0       	ldi	r25, 0x00	; 0
 b74:	0e 94 a3 03 	call	0x746	; 0x746 <writeAllPin>
	writeAllPin(&PORTC,LOW);
 b78:	60 e0       	ldi	r22, 0x00	; 0
 b7a:	85 e3       	ldi	r24, 0x35	; 53
 b7c:	90 e0       	ldi	r25, 0x00	; 0
 b7e:	0e 94 a3 03 	call	0x746	; 0x746 <writeAllPin>
	writeAllPin(&PORTD,LOW);
 b82:	60 e0       	ldi	r22, 0x00	; 0
 b84:	82 e3       	ldi	r24, 0x32	; 50
 b86:	90 e0       	ldi	r25, 0x00	; 0
 b88:	0e 94 a3 03 	call	0x746	; 0x746 <writeAllPin>
 b8c:	08 95       	ret

00000b8e <temperatureSettingEnd>:
}
void temperatureSettingEnd(void) 
{
 	writeEEPROM(0x00,set_temp);
 b8e:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__data_start>
 b92:	80 e0       	ldi	r24, 0x00	; 0
 b94:	90 e0       	ldi	r25, 0x00	; 0
 b96:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <writeEEPROM>
	setFlag = 0;
 b9a:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <setFlag>
	if(state==SET)
 b9e:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <state>
 ba2:	82 30       	cpi	r24, 0x02	; 2
 ba4:	19 f4       	brne	.+6      	; 0xbac <temperatureSettingEnd+0x1e>
	state=ON;
 ba6:	81 e0       	ldi	r24, 0x01	; 1
 ba8:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <state>
 bac:	08 95       	ret

00000bae <__divsf3>:
 bae:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <__divsf3x>
 bb2:	0c 94 cc 06 	jmp	0xd98	; 0xd98 <__fp_round>
 bb6:	0e 94 c5 06 	call	0xd8a	; 0xd8a <__fp_pscB>
 bba:	58 f0       	brcs	.+22     	; 0xbd2 <__divsf3+0x24>
 bbc:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fp_pscA>
 bc0:	40 f0       	brcs	.+16     	; 0xbd2 <__divsf3+0x24>
 bc2:	29 f4       	brne	.+10     	; 0xbce <__divsf3+0x20>
 bc4:	5f 3f       	cpi	r21, 0xFF	; 255
 bc6:	29 f0       	breq	.+10     	; 0xbd2 <__divsf3+0x24>
 bc8:	0c 94 b5 06 	jmp	0xd6a	; 0xd6a <__fp_inf>
 bcc:	51 11       	cpse	r21, r1
 bce:	0c 94 00 07 	jmp	0xe00	; 0xe00 <__fp_szero>
 bd2:	0c 94 bb 06 	jmp	0xd76	; 0xd76 <__fp_nan>

00000bd6 <__divsf3x>:
 bd6:	0e 94 dd 06 	call	0xdba	; 0xdba <__fp_split3>
 bda:	68 f3       	brcs	.-38     	; 0xbb6 <__divsf3+0x8>

00000bdc <__divsf3_pse>:
 bdc:	99 23       	and	r25, r25
 bde:	b1 f3       	breq	.-20     	; 0xbcc <__divsf3+0x1e>
 be0:	55 23       	and	r21, r21
 be2:	91 f3       	breq	.-28     	; 0xbc8 <__divsf3+0x1a>
 be4:	95 1b       	sub	r25, r21
 be6:	55 0b       	sbc	r21, r21
 be8:	bb 27       	eor	r27, r27
 bea:	aa 27       	eor	r26, r26
 bec:	62 17       	cp	r22, r18
 bee:	73 07       	cpc	r23, r19
 bf0:	84 07       	cpc	r24, r20
 bf2:	38 f0       	brcs	.+14     	; 0xc02 <__divsf3_pse+0x26>
 bf4:	9f 5f       	subi	r25, 0xFF	; 255
 bf6:	5f 4f       	sbci	r21, 0xFF	; 255
 bf8:	22 0f       	add	r18, r18
 bfa:	33 1f       	adc	r19, r19
 bfc:	44 1f       	adc	r20, r20
 bfe:	aa 1f       	adc	r26, r26
 c00:	a9 f3       	breq	.-22     	; 0xbec <__divsf3_pse+0x10>
 c02:	35 d0       	rcall	.+106    	; 0xc6e <__divsf3_pse+0x92>
 c04:	0e 2e       	mov	r0, r30
 c06:	3a f0       	brmi	.+14     	; 0xc16 <__divsf3_pse+0x3a>
 c08:	e0 e8       	ldi	r30, 0x80	; 128
 c0a:	32 d0       	rcall	.+100    	; 0xc70 <__divsf3_pse+0x94>
 c0c:	91 50       	subi	r25, 0x01	; 1
 c0e:	50 40       	sbci	r21, 0x00	; 0
 c10:	e6 95       	lsr	r30
 c12:	00 1c       	adc	r0, r0
 c14:	ca f7       	brpl	.-14     	; 0xc08 <__divsf3_pse+0x2c>
 c16:	2b d0       	rcall	.+86     	; 0xc6e <__divsf3_pse+0x92>
 c18:	fe 2f       	mov	r31, r30
 c1a:	29 d0       	rcall	.+82     	; 0xc6e <__divsf3_pse+0x92>
 c1c:	66 0f       	add	r22, r22
 c1e:	77 1f       	adc	r23, r23
 c20:	88 1f       	adc	r24, r24
 c22:	bb 1f       	adc	r27, r27
 c24:	26 17       	cp	r18, r22
 c26:	37 07       	cpc	r19, r23
 c28:	48 07       	cpc	r20, r24
 c2a:	ab 07       	cpc	r26, r27
 c2c:	b0 e8       	ldi	r27, 0x80	; 128
 c2e:	09 f0       	breq	.+2      	; 0xc32 <__divsf3_pse+0x56>
 c30:	bb 0b       	sbc	r27, r27
 c32:	80 2d       	mov	r24, r0
 c34:	bf 01       	movw	r22, r30
 c36:	ff 27       	eor	r31, r31
 c38:	93 58       	subi	r25, 0x83	; 131
 c3a:	5f 4f       	sbci	r21, 0xFF	; 255
 c3c:	3a f0       	brmi	.+14     	; 0xc4c <__divsf3_pse+0x70>
 c3e:	9e 3f       	cpi	r25, 0xFE	; 254
 c40:	51 05       	cpc	r21, r1
 c42:	78 f0       	brcs	.+30     	; 0xc62 <__divsf3_pse+0x86>
 c44:	0c 94 b5 06 	jmp	0xd6a	; 0xd6a <__fp_inf>
 c48:	0c 94 00 07 	jmp	0xe00	; 0xe00 <__fp_szero>
 c4c:	5f 3f       	cpi	r21, 0xFF	; 255
 c4e:	e4 f3       	brlt	.-8      	; 0xc48 <__divsf3_pse+0x6c>
 c50:	98 3e       	cpi	r25, 0xE8	; 232
 c52:	d4 f3       	brlt	.-12     	; 0xc48 <__divsf3_pse+0x6c>
 c54:	86 95       	lsr	r24
 c56:	77 95       	ror	r23
 c58:	67 95       	ror	r22
 c5a:	b7 95       	ror	r27
 c5c:	f7 95       	ror	r31
 c5e:	9f 5f       	subi	r25, 0xFF	; 255
 c60:	c9 f7       	brne	.-14     	; 0xc54 <__divsf3_pse+0x78>
 c62:	88 0f       	add	r24, r24
 c64:	91 1d       	adc	r25, r1
 c66:	96 95       	lsr	r25
 c68:	87 95       	ror	r24
 c6a:	97 f9       	bld	r25, 7
 c6c:	08 95       	ret
 c6e:	e1 e0       	ldi	r30, 0x01	; 1
 c70:	66 0f       	add	r22, r22
 c72:	77 1f       	adc	r23, r23
 c74:	88 1f       	adc	r24, r24
 c76:	bb 1f       	adc	r27, r27
 c78:	62 17       	cp	r22, r18
 c7a:	73 07       	cpc	r23, r19
 c7c:	84 07       	cpc	r24, r20
 c7e:	ba 07       	cpc	r27, r26
 c80:	20 f0       	brcs	.+8      	; 0xc8a <__divsf3_pse+0xae>
 c82:	62 1b       	sub	r22, r18
 c84:	73 0b       	sbc	r23, r19
 c86:	84 0b       	sbc	r24, r20
 c88:	ba 0b       	sbc	r27, r26
 c8a:	ee 1f       	adc	r30, r30
 c8c:	88 f7       	brcc	.-30     	; 0xc70 <__divsf3_pse+0x94>
 c8e:	e0 95       	com	r30
 c90:	08 95       	ret

00000c92 <__fixunssfsi>:
 c92:	0e 94 e5 06 	call	0xdca	; 0xdca <__fp_splitA>
 c96:	88 f0       	brcs	.+34     	; 0xcba <__fixunssfsi+0x28>
 c98:	9f 57       	subi	r25, 0x7F	; 127
 c9a:	98 f0       	brcs	.+38     	; 0xcc2 <__fixunssfsi+0x30>
 c9c:	b9 2f       	mov	r27, r25
 c9e:	99 27       	eor	r25, r25
 ca0:	b7 51       	subi	r27, 0x17	; 23
 ca2:	b0 f0       	brcs	.+44     	; 0xcd0 <__fixunssfsi+0x3e>
 ca4:	e1 f0       	breq	.+56     	; 0xcde <__fixunssfsi+0x4c>
 ca6:	66 0f       	add	r22, r22
 ca8:	77 1f       	adc	r23, r23
 caa:	88 1f       	adc	r24, r24
 cac:	99 1f       	adc	r25, r25
 cae:	1a f0       	brmi	.+6      	; 0xcb6 <__fixunssfsi+0x24>
 cb0:	ba 95       	dec	r27
 cb2:	c9 f7       	brne	.-14     	; 0xca6 <__fixunssfsi+0x14>
 cb4:	14 c0       	rjmp	.+40     	; 0xcde <__fixunssfsi+0x4c>
 cb6:	b1 30       	cpi	r27, 0x01	; 1
 cb8:	91 f0       	breq	.+36     	; 0xcde <__fixunssfsi+0x4c>
 cba:	0e 94 ff 06 	call	0xdfe	; 0xdfe <__fp_zero>
 cbe:	b1 e0       	ldi	r27, 0x01	; 1
 cc0:	08 95       	ret
 cc2:	0c 94 ff 06 	jmp	0xdfe	; 0xdfe <__fp_zero>
 cc6:	67 2f       	mov	r22, r23
 cc8:	78 2f       	mov	r23, r24
 cca:	88 27       	eor	r24, r24
 ccc:	b8 5f       	subi	r27, 0xF8	; 248
 cce:	39 f0       	breq	.+14     	; 0xcde <__fixunssfsi+0x4c>
 cd0:	b9 3f       	cpi	r27, 0xF9	; 249
 cd2:	cc f3       	brlt	.-14     	; 0xcc6 <__fixunssfsi+0x34>
 cd4:	86 95       	lsr	r24
 cd6:	77 95       	ror	r23
 cd8:	67 95       	ror	r22
 cda:	b3 95       	inc	r27
 cdc:	d9 f7       	brne	.-10     	; 0xcd4 <__fixunssfsi+0x42>
 cde:	3e f4       	brtc	.+14     	; 0xcee <__fixunssfsi+0x5c>
 ce0:	90 95       	com	r25
 ce2:	80 95       	com	r24
 ce4:	70 95       	com	r23
 ce6:	61 95       	neg	r22
 ce8:	7f 4f       	sbci	r23, 0xFF	; 255
 cea:	8f 4f       	sbci	r24, 0xFF	; 255
 cec:	9f 4f       	sbci	r25, 0xFF	; 255
 cee:	08 95       	ret

00000cf0 <__floatunsisf>:
 cf0:	e8 94       	clt
 cf2:	09 c0       	rjmp	.+18     	; 0xd06 <__floatsisf+0x12>

00000cf4 <__floatsisf>:
 cf4:	97 fb       	bst	r25, 7
 cf6:	3e f4       	brtc	.+14     	; 0xd06 <__floatsisf+0x12>
 cf8:	90 95       	com	r25
 cfa:	80 95       	com	r24
 cfc:	70 95       	com	r23
 cfe:	61 95       	neg	r22
 d00:	7f 4f       	sbci	r23, 0xFF	; 255
 d02:	8f 4f       	sbci	r24, 0xFF	; 255
 d04:	9f 4f       	sbci	r25, 0xFF	; 255
 d06:	99 23       	and	r25, r25
 d08:	a9 f0       	breq	.+42     	; 0xd34 <__floatsisf+0x40>
 d0a:	f9 2f       	mov	r31, r25
 d0c:	96 e9       	ldi	r25, 0x96	; 150
 d0e:	bb 27       	eor	r27, r27
 d10:	93 95       	inc	r25
 d12:	f6 95       	lsr	r31
 d14:	87 95       	ror	r24
 d16:	77 95       	ror	r23
 d18:	67 95       	ror	r22
 d1a:	b7 95       	ror	r27
 d1c:	f1 11       	cpse	r31, r1
 d1e:	f8 cf       	rjmp	.-16     	; 0xd10 <__floatsisf+0x1c>
 d20:	fa f4       	brpl	.+62     	; 0xd60 <__floatsisf+0x6c>
 d22:	bb 0f       	add	r27, r27
 d24:	11 f4       	brne	.+4      	; 0xd2a <__floatsisf+0x36>
 d26:	60 ff       	sbrs	r22, 0
 d28:	1b c0       	rjmp	.+54     	; 0xd60 <__floatsisf+0x6c>
 d2a:	6f 5f       	subi	r22, 0xFF	; 255
 d2c:	7f 4f       	sbci	r23, 0xFF	; 255
 d2e:	8f 4f       	sbci	r24, 0xFF	; 255
 d30:	9f 4f       	sbci	r25, 0xFF	; 255
 d32:	16 c0       	rjmp	.+44     	; 0xd60 <__floatsisf+0x6c>
 d34:	88 23       	and	r24, r24
 d36:	11 f0       	breq	.+4      	; 0xd3c <__floatsisf+0x48>
 d38:	96 e9       	ldi	r25, 0x96	; 150
 d3a:	11 c0       	rjmp	.+34     	; 0xd5e <__floatsisf+0x6a>
 d3c:	77 23       	and	r23, r23
 d3e:	21 f0       	breq	.+8      	; 0xd48 <__floatsisf+0x54>
 d40:	9e e8       	ldi	r25, 0x8E	; 142
 d42:	87 2f       	mov	r24, r23
 d44:	76 2f       	mov	r23, r22
 d46:	05 c0       	rjmp	.+10     	; 0xd52 <__floatsisf+0x5e>
 d48:	66 23       	and	r22, r22
 d4a:	71 f0       	breq	.+28     	; 0xd68 <__floatsisf+0x74>
 d4c:	96 e8       	ldi	r25, 0x86	; 134
 d4e:	86 2f       	mov	r24, r22
 d50:	70 e0       	ldi	r23, 0x00	; 0
 d52:	60 e0       	ldi	r22, 0x00	; 0
 d54:	2a f0       	brmi	.+10     	; 0xd60 <__floatsisf+0x6c>
 d56:	9a 95       	dec	r25
 d58:	66 0f       	add	r22, r22
 d5a:	77 1f       	adc	r23, r23
 d5c:	88 1f       	adc	r24, r24
 d5e:	da f7       	brpl	.-10     	; 0xd56 <__floatsisf+0x62>
 d60:	88 0f       	add	r24, r24
 d62:	96 95       	lsr	r25
 d64:	87 95       	ror	r24
 d66:	97 f9       	bld	r25, 7
 d68:	08 95       	ret

00000d6a <__fp_inf>:
 d6a:	97 f9       	bld	r25, 7
 d6c:	9f 67       	ori	r25, 0x7F	; 127
 d6e:	80 e8       	ldi	r24, 0x80	; 128
 d70:	70 e0       	ldi	r23, 0x00	; 0
 d72:	60 e0       	ldi	r22, 0x00	; 0
 d74:	08 95       	ret

00000d76 <__fp_nan>:
 d76:	9f ef       	ldi	r25, 0xFF	; 255
 d78:	80 ec       	ldi	r24, 0xC0	; 192
 d7a:	08 95       	ret

00000d7c <__fp_pscA>:
 d7c:	00 24       	eor	r0, r0
 d7e:	0a 94       	dec	r0
 d80:	16 16       	cp	r1, r22
 d82:	17 06       	cpc	r1, r23
 d84:	18 06       	cpc	r1, r24
 d86:	09 06       	cpc	r0, r25
 d88:	08 95       	ret

00000d8a <__fp_pscB>:
 d8a:	00 24       	eor	r0, r0
 d8c:	0a 94       	dec	r0
 d8e:	12 16       	cp	r1, r18
 d90:	13 06       	cpc	r1, r19
 d92:	14 06       	cpc	r1, r20
 d94:	05 06       	cpc	r0, r21
 d96:	08 95       	ret

00000d98 <__fp_round>:
 d98:	09 2e       	mov	r0, r25
 d9a:	03 94       	inc	r0
 d9c:	00 0c       	add	r0, r0
 d9e:	11 f4       	brne	.+4      	; 0xda4 <__fp_round+0xc>
 da0:	88 23       	and	r24, r24
 da2:	52 f0       	brmi	.+20     	; 0xdb8 <__fp_round+0x20>
 da4:	bb 0f       	add	r27, r27
 da6:	40 f4       	brcc	.+16     	; 0xdb8 <__fp_round+0x20>
 da8:	bf 2b       	or	r27, r31
 daa:	11 f4       	brne	.+4      	; 0xdb0 <__fp_round+0x18>
 dac:	60 ff       	sbrs	r22, 0
 dae:	04 c0       	rjmp	.+8      	; 0xdb8 <__fp_round+0x20>
 db0:	6f 5f       	subi	r22, 0xFF	; 255
 db2:	7f 4f       	sbci	r23, 0xFF	; 255
 db4:	8f 4f       	sbci	r24, 0xFF	; 255
 db6:	9f 4f       	sbci	r25, 0xFF	; 255
 db8:	08 95       	ret

00000dba <__fp_split3>:
 dba:	57 fd       	sbrc	r21, 7
 dbc:	90 58       	subi	r25, 0x80	; 128
 dbe:	44 0f       	add	r20, r20
 dc0:	55 1f       	adc	r21, r21
 dc2:	59 f0       	breq	.+22     	; 0xdda <__fp_splitA+0x10>
 dc4:	5f 3f       	cpi	r21, 0xFF	; 255
 dc6:	71 f0       	breq	.+28     	; 0xde4 <__fp_splitA+0x1a>
 dc8:	47 95       	ror	r20

00000dca <__fp_splitA>:
 dca:	88 0f       	add	r24, r24
 dcc:	97 fb       	bst	r25, 7
 dce:	99 1f       	adc	r25, r25
 dd0:	61 f0       	breq	.+24     	; 0xdea <__fp_splitA+0x20>
 dd2:	9f 3f       	cpi	r25, 0xFF	; 255
 dd4:	79 f0       	breq	.+30     	; 0xdf4 <__fp_splitA+0x2a>
 dd6:	87 95       	ror	r24
 dd8:	08 95       	ret
 dda:	12 16       	cp	r1, r18
 ddc:	13 06       	cpc	r1, r19
 dde:	14 06       	cpc	r1, r20
 de0:	55 1f       	adc	r21, r21
 de2:	f2 cf       	rjmp	.-28     	; 0xdc8 <__fp_split3+0xe>
 de4:	46 95       	lsr	r20
 de6:	f1 df       	rcall	.-30     	; 0xdca <__fp_splitA>
 de8:	08 c0       	rjmp	.+16     	; 0xdfa <__fp_splitA+0x30>
 dea:	16 16       	cp	r1, r22
 dec:	17 06       	cpc	r1, r23
 dee:	18 06       	cpc	r1, r24
 df0:	99 1f       	adc	r25, r25
 df2:	f1 cf       	rjmp	.-30     	; 0xdd6 <__fp_splitA+0xc>
 df4:	86 95       	lsr	r24
 df6:	71 05       	cpc	r23, r1
 df8:	61 05       	cpc	r22, r1
 dfa:	08 94       	sec
 dfc:	08 95       	ret

00000dfe <__fp_zero>:
 dfe:	e8 94       	clt

00000e00 <__fp_szero>:
 e00:	bb 27       	eor	r27, r27
 e02:	66 27       	eor	r22, r22
 e04:	77 27       	eor	r23, r23
 e06:	cb 01       	movw	r24, r22
 e08:	97 f9       	bld	r25, 7
 e0a:	08 95       	ret

00000e0c <__mulsf3>:
 e0c:	0e 94 19 07 	call	0xe32	; 0xe32 <__mulsf3x>
 e10:	0c 94 cc 06 	jmp	0xd98	; 0xd98 <__fp_round>
 e14:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fp_pscA>
 e18:	38 f0       	brcs	.+14     	; 0xe28 <__mulsf3+0x1c>
 e1a:	0e 94 c5 06 	call	0xd8a	; 0xd8a <__fp_pscB>
 e1e:	20 f0       	brcs	.+8      	; 0xe28 <__mulsf3+0x1c>
 e20:	95 23       	and	r25, r21
 e22:	11 f0       	breq	.+4      	; 0xe28 <__mulsf3+0x1c>
 e24:	0c 94 b5 06 	jmp	0xd6a	; 0xd6a <__fp_inf>
 e28:	0c 94 bb 06 	jmp	0xd76	; 0xd76 <__fp_nan>
 e2c:	11 24       	eor	r1, r1
 e2e:	0c 94 00 07 	jmp	0xe00	; 0xe00 <__fp_szero>

00000e32 <__mulsf3x>:
 e32:	0e 94 dd 06 	call	0xdba	; 0xdba <__fp_split3>
 e36:	70 f3       	brcs	.-36     	; 0xe14 <__mulsf3+0x8>

00000e38 <__mulsf3_pse>:
 e38:	95 9f       	mul	r25, r21
 e3a:	c1 f3       	breq	.-16     	; 0xe2c <__mulsf3+0x20>
 e3c:	95 0f       	add	r25, r21
 e3e:	50 e0       	ldi	r21, 0x00	; 0
 e40:	55 1f       	adc	r21, r21
 e42:	62 9f       	mul	r22, r18
 e44:	f0 01       	movw	r30, r0
 e46:	72 9f       	mul	r23, r18
 e48:	bb 27       	eor	r27, r27
 e4a:	f0 0d       	add	r31, r0
 e4c:	b1 1d       	adc	r27, r1
 e4e:	63 9f       	mul	r22, r19
 e50:	aa 27       	eor	r26, r26
 e52:	f0 0d       	add	r31, r0
 e54:	b1 1d       	adc	r27, r1
 e56:	aa 1f       	adc	r26, r26
 e58:	64 9f       	mul	r22, r20
 e5a:	66 27       	eor	r22, r22
 e5c:	b0 0d       	add	r27, r0
 e5e:	a1 1d       	adc	r26, r1
 e60:	66 1f       	adc	r22, r22
 e62:	82 9f       	mul	r24, r18
 e64:	22 27       	eor	r18, r18
 e66:	b0 0d       	add	r27, r0
 e68:	a1 1d       	adc	r26, r1
 e6a:	62 1f       	adc	r22, r18
 e6c:	73 9f       	mul	r23, r19
 e6e:	b0 0d       	add	r27, r0
 e70:	a1 1d       	adc	r26, r1
 e72:	62 1f       	adc	r22, r18
 e74:	83 9f       	mul	r24, r19
 e76:	a0 0d       	add	r26, r0
 e78:	61 1d       	adc	r22, r1
 e7a:	22 1f       	adc	r18, r18
 e7c:	74 9f       	mul	r23, r20
 e7e:	33 27       	eor	r19, r19
 e80:	a0 0d       	add	r26, r0
 e82:	61 1d       	adc	r22, r1
 e84:	23 1f       	adc	r18, r19
 e86:	84 9f       	mul	r24, r20
 e88:	60 0d       	add	r22, r0
 e8a:	21 1d       	adc	r18, r1
 e8c:	82 2f       	mov	r24, r18
 e8e:	76 2f       	mov	r23, r22
 e90:	6a 2f       	mov	r22, r26
 e92:	11 24       	eor	r1, r1
 e94:	9f 57       	subi	r25, 0x7F	; 127
 e96:	50 40       	sbci	r21, 0x00	; 0
 e98:	9a f0       	brmi	.+38     	; 0xec0 <__mulsf3_pse+0x88>
 e9a:	f1 f0       	breq	.+60     	; 0xed8 <__mulsf3_pse+0xa0>
 e9c:	88 23       	and	r24, r24
 e9e:	4a f0       	brmi	.+18     	; 0xeb2 <__mulsf3_pse+0x7a>
 ea0:	ee 0f       	add	r30, r30
 ea2:	ff 1f       	adc	r31, r31
 ea4:	bb 1f       	adc	r27, r27
 ea6:	66 1f       	adc	r22, r22
 ea8:	77 1f       	adc	r23, r23
 eaa:	88 1f       	adc	r24, r24
 eac:	91 50       	subi	r25, 0x01	; 1
 eae:	50 40       	sbci	r21, 0x00	; 0
 eb0:	a9 f7       	brne	.-22     	; 0xe9c <__mulsf3_pse+0x64>
 eb2:	9e 3f       	cpi	r25, 0xFE	; 254
 eb4:	51 05       	cpc	r21, r1
 eb6:	80 f0       	brcs	.+32     	; 0xed8 <__mulsf3_pse+0xa0>
 eb8:	0c 94 b5 06 	jmp	0xd6a	; 0xd6a <__fp_inf>
 ebc:	0c 94 00 07 	jmp	0xe00	; 0xe00 <__fp_szero>
 ec0:	5f 3f       	cpi	r21, 0xFF	; 255
 ec2:	e4 f3       	brlt	.-8      	; 0xebc <__mulsf3_pse+0x84>
 ec4:	98 3e       	cpi	r25, 0xE8	; 232
 ec6:	d4 f3       	brlt	.-12     	; 0xebc <__mulsf3_pse+0x84>
 ec8:	86 95       	lsr	r24
 eca:	77 95       	ror	r23
 ecc:	67 95       	ror	r22
 ece:	b7 95       	ror	r27
 ed0:	f7 95       	ror	r31
 ed2:	e7 95       	ror	r30
 ed4:	9f 5f       	subi	r25, 0xFF	; 255
 ed6:	c1 f7       	brne	.-16     	; 0xec8 <__mulsf3_pse+0x90>
 ed8:	fe 2b       	or	r31, r30
 eda:	88 0f       	add	r24, r24
 edc:	91 1d       	adc	r25, r1
 ede:	96 95       	lsr	r25
 ee0:	87 95       	ror	r24
 ee2:	97 f9       	bld	r25, 7
 ee4:	08 95       	ret

00000ee6 <__udivmodsi4>:
 ee6:	a1 e2       	ldi	r26, 0x21	; 33
 ee8:	1a 2e       	mov	r1, r26
 eea:	aa 1b       	sub	r26, r26
 eec:	bb 1b       	sub	r27, r27
 eee:	fd 01       	movw	r30, r26
 ef0:	0d c0       	rjmp	.+26     	; 0xf0c <__udivmodsi4_ep>

00000ef2 <__udivmodsi4_loop>:
 ef2:	aa 1f       	adc	r26, r26
 ef4:	bb 1f       	adc	r27, r27
 ef6:	ee 1f       	adc	r30, r30
 ef8:	ff 1f       	adc	r31, r31
 efa:	a2 17       	cp	r26, r18
 efc:	b3 07       	cpc	r27, r19
 efe:	e4 07       	cpc	r30, r20
 f00:	f5 07       	cpc	r31, r21
 f02:	20 f0       	brcs	.+8      	; 0xf0c <__udivmodsi4_ep>
 f04:	a2 1b       	sub	r26, r18
 f06:	b3 0b       	sbc	r27, r19
 f08:	e4 0b       	sbc	r30, r20
 f0a:	f5 0b       	sbc	r31, r21

00000f0c <__udivmodsi4_ep>:
 f0c:	66 1f       	adc	r22, r22
 f0e:	77 1f       	adc	r23, r23
 f10:	88 1f       	adc	r24, r24
 f12:	99 1f       	adc	r25, r25
 f14:	1a 94       	dec	r1
 f16:	69 f7       	brne	.-38     	; 0xef2 <__udivmodsi4_loop>
 f18:	60 95       	com	r22
 f1a:	70 95       	com	r23
 f1c:	80 95       	com	r24
 f1e:	90 95       	com	r25
 f20:	9b 01       	movw	r18, r22
 f22:	ac 01       	movw	r20, r24
 f24:	bd 01       	movw	r22, r26
 f26:	cf 01       	movw	r24, r30
 f28:	08 95       	ret

00000f2a <__umulhisi3>:
 f2a:	a2 9f       	mul	r26, r18
 f2c:	b0 01       	movw	r22, r0
 f2e:	b3 9f       	mul	r27, r19
 f30:	c0 01       	movw	r24, r0
 f32:	a3 9f       	mul	r26, r19
 f34:	70 0d       	add	r23, r0
 f36:	81 1d       	adc	r24, r1
 f38:	11 24       	eor	r1, r1
 f3a:	91 1d       	adc	r25, r1
 f3c:	b2 9f       	mul	r27, r18
 f3e:	70 0d       	add	r23, r0
 f40:	81 1d       	adc	r24, r1
 f42:	11 24       	eor	r1, r1
 f44:	91 1d       	adc	r25, r1
 f46:	08 95       	ret

00000f48 <__muluhisi3>:
 f48:	0e 94 95 07 	call	0xf2a	; 0xf2a <__umulhisi3>
 f4c:	a5 9f       	mul	r26, r21
 f4e:	90 0d       	add	r25, r0
 f50:	b4 9f       	mul	r27, r20
 f52:	90 0d       	add	r25, r0
 f54:	a4 9f       	mul	r26, r20
 f56:	80 0d       	add	r24, r0
 f58:	91 1d       	adc	r25, r1
 f5a:	11 24       	eor	r1, r1
 f5c:	08 95       	ret

00000f5e <_exit>:
 f5e:	f8 94       	cli

00000f60 <__stop_program>:
 f60:	ff cf       	rjmp	.-2      	; 0xf60 <__stop_program>
